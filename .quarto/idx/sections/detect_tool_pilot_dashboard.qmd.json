{"title":"DETECT Tool Pilot","markdown":{"yaml":{"title":"DETECT Tool Pilot","format":"dashboard","scrolling":true},"headingText":"Libraries","containsRefs":false,"markdown":"\n\n```{r, include = FALSE}\nlibrary(here)\nlibrary(dplyr)\nlibrary(flextable)\nlibrary(officer)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(crosstalk)\nlibrary(DT)\n```\n\n<!-- Load data -->\n\n```{r, include = FALSE}\ndetect_tool_data_path <- here::here(\"data\", \"detect_tool_pilot\",\n                                    \"detect_tool_pilot.RDS\")\nlink_data_path <- here::here(\"data\", \"detect_tool_pilot\",\n                               \"detect_tool_pilot_link_hits_long_format.RDS\")\naps_reports_data_path <- here::here(\"data\", \"detect_tool_pilot\",\n                                    \"aps_report_data.csv\")\n\npilot_data <- readRDS(detect_tool_data_path)\nlink_data <- readRDS(link_data_path)\n\nvar_desc <- readRDS(here::here(\"data\", \"detect_tool_pilot\", \n                               \"detect_tool_pilot_variable_descriptions.RDS\"))\n\npath <- here::here(\"data\", \"detect_tool_pilot\",\n                   \"dashboard_prepped_data.RData\")\nload(path)\n```\n\n<!-- Load functions -->\n\n```{r}\nsource(here::here(\"r\", \"format_table.R\"))\nsource(here::here(\"r\", \"gauge_chart.R\"))\n```\n\n<!-- Custom functions -->\n\n```{r, include = FALSE}\n# Merge specified rows of flextable with the same values\n# David Gohel's response to this Stack Overflow question: https://stackoverflow.com/questions/56327151/flextable-how-to-merge-rows-with-duplicate-values-for-some-columns\nmerge_custom <- function(ft, x, columns){\n  z <- rle(x)\n  rows_at <- cumsum(z$lengths) - z$lengths + 1\n\n  for(i in seq_along(rows_at)){\n    for(j in columns)\n      ft <- merge_at(x = ft, i = seq( rows_at[i], \n                                      rows_at[i] + z$lengths[i] - 1), j = j)\n  }\n  ft\n}\n```\n\n\n#  {.sidebar}\n\n```{r, echo=FALSE}\nhead_1 <- \"This dashboard displays statistics for:\\n\\n\"\n\nside_bar_df <- data.frame(\n  names = c(\"File Names\", \"File Names\", \"File Names\", \"Last Modified\"),\n  values = c(basename(detect_tool_data_path), basename(link_data_path),\n               basename(aps_reports_data_path), \n             format(Sys.time(), \"%Y-%m-%d %H:%M %Z\"))\n) \n\nside_bar_df %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.3), unit = \"in\") %>%\n  add_header_lines(head_1) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\") %>%\n  # Merge screening items column groups\n  merge_custom(x = side_bar_df$names, columns = 1) %>%\n  valign(j = 1, valign = \"center\")\n\n```\n\n```{r, echo=FALSE}\nsubjects <- pilot_data %>% select(ri_patient_mrn) %>% unique() %>% nrow()\nclinicians <- pilot_data %>% select(ri_clinician_id_name) %>% unique() %>% nrow()\nsurvey_responses <- pilot_data %>% nrow()\ntime_period <- paste(min(as.Date(pilot_data$ri_date)), \"to\", \n                     max(as.Date(pilot_data$ri_date)))\n\nhead_2 <- \"This data references:\\n\\n\"\n\ndata.frame(\n  names = c(\"Subjects\", \"Clinicians\", \"Survey Responses\", \"Time Period\"),\n  values = c(subjects, clinicians, survey_responses, time_period)\n) %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.2), unit = \"in\") %>%\n  add_header_lines(head_2) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\")\n\n```\n\n\n# All\n\n```{r, include=FALSE}\n# Indicators of EM Module variables\nind_em_vars <- c(\"ri_necessities_3cat_f\", \"ri_environment_3cat_f\", \n                 \"ri_caregiver_3cat_f\", \"ri_sedated_3cat_f\", \n                 \"ri_isolated_3cat_f\", \"ri_anxious_3cat_f\", \n                 \"ri_prohibited_3cat_f\", \"ri_unmet_needs_3cat_f\", \n                 \"ri_injuries_3cat_f\")\n\n# EM type variables\nem_type_vars <- c(\"ri_em_type_1_2cat_f\", \"ri_em_type_2_2cat_f\", \n                  \"ri_em_type_3_2cat_f\", \"ri_em_type_4_2cat_f\", \n                  \"ri_em_type_5_2cat_f\", \"ri_em_type_6_2cat_f\",  \n                  \"ri_em_type_7_2cat_f\", \"ri_em_type_98_2cat_f\",\n                  \"ri_em_type_99_2cat_f\")\n\n# All text box variables\ntext_box_items <- c(\"ri_environment_un_reason\", \"ri_caregiver_oth\",\n                    \"ri_patient_assess\", \"ri_em_no_reason\", \"ri_em_reason\", \n                    \"ri_em_type_other\", \"ri_aps_no_reason\", \n                    \"ri_refer_svcs_specify\", \"ri_reflection_notes\")\n```\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = subjects\n)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n\nstarted_screenings <- pilot_data %>% filter(if_any(\n  .cols = c(all_of(ind_em_vars)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as having values for the MRN and EM status impression. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- pilot_data %>% filter(if_all(\n  .cols = c(ri_patient_mrn, suspect_em_2cat),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- pilot_data %>% filter(if_all(\n  .cols = all_of(ind_em_vars),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em_2cat )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n<!-- One of the days (11/11) could not be viewed. This impacted the reporting guidelines for TX link. The number of clicks could have either any number from 0 to 3 for that day.-->\n\n```{r}\n#| echo: false\n#| title: Reporting Guidance Link Clicks\n#| content: valuebox\n\nrg_link_clicks <- link_data %>% filter(grepl(\"^detect_\", link)) %>% \n  filter(hits >= 1) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"link\",\n  color = \"vb-blue\",\n  value = rg_link_clicks\n)\n```\n\n```{r}\n#| echo: false\n#| title: Abuse Types Link Clicks\n#| content: valuebox\n\ndef_link_clicks <- link_data %>% filter(grepl(\"elder_abuse_definitions\", link)) %>% \n  filter(hits >= 1) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"link\",\n  color = \"vb-blue\",\n  value = def_link_clicks\n)\n```\n\n## Row {.flow}\n\n```{r, echo = FALSE}\n#| title: Missingness Summary\n# Plot missing data\ngg_missing <- ggplot(missing_plot_data, aes(x = count, y = label, fill = missingness_3cat_f)) +\n  geom_bar(stat = \"identity\", color = \"transparent\", show.legend = TRUE) +\n  scale_fill_manual(\"Legend\", values = c(\"Missing\" = \"#AFD5E0\", \n                                         \"Not missing\" = \"#219ebc\",\n                                         \"Not applicable\" = \"#023047\"),\n                    drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\n\nggplotly(gg_missing,tooltip = c(\"count\")) %>%\nlayout(\n       xaxis = list(fixedrange = TRUE),\n       yaxis = list(fixedrange = TRUE)\n)\n```\n\n## Row\n\n```{r, echo = FALSE}\n#| title: Textbox Data\nDT::datatable(text_box_table_data, options = list(autoWidth = TRUE), \n              colnames = c(\"Record ID\", \"Date\", \"Variable Label\", \n                           \"Text Box Content\"),\n              filter = list(\n                position = 'top', clear = FALSE)\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r}\n#| title: Indicators of EM Module Summary\ngg_ind_em <- ggplot(ind_em_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=FALSE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#219ebc\", \n                               \"No\" = \"#AFD5E0\",\n                               \"Unable to assess\" = \"#023047\",\n                               \"NA\" = \"#3C5967\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_ind_em, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n```{r, echo = FALSE}\n#| title: Suspect EM Summary\n\ngg_sus_em <- ggplot(suspect_em_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#BAAE21\", \n                               \"No\" = \"#CCC99E\",\n                               \"NA\" = \"#454002\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_sus_em, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n```{r, echo = FALSE}\n#| title: EM Type Summary\n\ngg_em_type <- ggplot(em_type_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#BA21B3\", \n                               \"No\" = \"#CC9EC9\",\n                               \"NA\" = \"#460242\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_em_type, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n## Row \n\n### Column {width=\"50%\"}\n\n```{r, echo = FALSE}\n#| title: Intent to Report to APS Summary\n\ngg_report <- ggplot(report_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#21BA97\", \n                               \"No\" = \"#9eccc1\",\n                               \"NA\" = \"#024536\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_report, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n### Column {width=\"50%\"}\n\n```{r, echo = FALSE}\n#| title: Number of Intended APS Reports that Were Made\n\n# sectors <- gaugeSectors(\n#   success = c(goal*(80/100), goal*(100/100)),\n#   warning = c(goal*(60/100), goal*(79/100)),\n#   danger = c(goal*(0/100), goal*(59/100)),\n#   colors = c(\"#70bfb3\", \"#ffb700\", \"#ff625e\")\n# )\n# \n# gauge(completed_interviews, min = 0, max = goal,\n#       sectors = sectors)\n\n gauge_chart(reports_made, reports_intended)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Indicators of EM Module By Suspect EM\nfacet_labels <- c(\n                    `Yes` = \"EM Suspected\",\n                    `No` = \"EM not Suspected\"\n                    )\n\ngg_ind_sus_em <- ggplot(ind_sus_em_plot_data, \n                      aes(x = perc, y = ind_em_label, fill = em_ind_value,\n                          text = paste0(\"Count: \", count, \"\\nProportion: \",\n                                        perc_label))) +\n  geom_bar(stat = \"identity\", show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#219ebc\", \n                               \"No\" = \"#AFD5E0\",\n                               \"Unable to assess\" = \"#023047\",\n                               \"NA\" = \"#3C5967\"), drop = FALSE) +\n  scale_y_discrete(drop = FALSE) +\n  theme_bw() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) +\n  facet_wrap(~ suspect_em_2cat_f, labeller = as_labeller(facet_labels), \n  scales = \"free_x\")\n\nggplotly(gg_ind_sus_em, tooltip = c(\"text\")) %>%\n    layout(\n           xaxis = list(fixedrange = TRUE),\n           yaxis = list(\n             # range = list(0,10),\n             fixedrange = TRUE)\n    ) \n```\n\n```{r, echo = FALSE}\n#| title: Table\nind_sus_em_table_data %>%\n  DT::datatable(., class = list(stripe = FALSE), \n                options = list(autoWidth = TRUE, columnDefs = list(list(\n              targets = 1,  # Column index starts from 0\n              visible = FALSE\n            ))), \n              colnames = c(\"Shade column\", \"Abuse Type Suspected\", \"Response\", \"N\", \n                           \"Proportion\"),\n              filter = list(\n                position = 'top', clear = FALSE)\n) %>% formatStyle(\n  'shade_col',\n  target = 'row',\n  backgroundColor = styleEqual(c(0, 1), c('transparent', '#EEEEEE'))\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: EM Types When EM is Suspected - Plot\n\ngg_sus_type_em <- ggplot(sus_type_em_plot_data, \n                      aes(x = count, y = label, fill = em_type_value, \n                          text = paste0(\"Count: \", count, \"\\nProportion: \",\n                                        perc))) +\n  geom_bar(stat = \"identity\", show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#BA21B3\", \n                               \"No\" = \"#CC9EC9\",\n                               \"NA\" = \"#460242\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_sus_type_em, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n```{r, echo = FALSE}\n#| title: Table\nind_sus_em_table_data %>%\n  DT::datatable(., class = list(stripe = FALSE), \n                options = list(autoWidth = TRUE, columnDefs = list(list(\n              targets = 1,  # Column index starts from 0\n              visible = FALSE\n            ))), \n              colnames = c(\"Shade column\",\"Suspect EM\", \n                           \"Indicators of EM module\", \"Response\", \"N\", \n                           \"Proportion\"),\n              filter = list(\n                position = 'top', clear = FALSE)\n) %>% formatStyle(\n  'shade_col',\n  target = 'row',\n  backgroundColor = styleEqual(c(0, 1), c('transparent', '#EEEEEE'))\n)\n```\n\n\n\n\n","srcMarkdownNoYaml":"\n\n```{r, include = FALSE}\n# Libraries\nlibrary(here)\nlibrary(dplyr)\nlibrary(flextable)\nlibrary(officer)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(crosstalk)\nlibrary(DT)\n```\n\n<!-- Load data -->\n\n```{r, include = FALSE}\ndetect_tool_data_path <- here::here(\"data\", \"detect_tool_pilot\",\n                                    \"detect_tool_pilot.RDS\")\nlink_data_path <- here::here(\"data\", \"detect_tool_pilot\",\n                               \"detect_tool_pilot_link_hits_long_format.RDS\")\naps_reports_data_path <- here::here(\"data\", \"detect_tool_pilot\",\n                                    \"aps_report_data.csv\")\n\npilot_data <- readRDS(detect_tool_data_path)\nlink_data <- readRDS(link_data_path)\n\nvar_desc <- readRDS(here::here(\"data\", \"detect_tool_pilot\", \n                               \"detect_tool_pilot_variable_descriptions.RDS\"))\n\npath <- here::here(\"data\", \"detect_tool_pilot\",\n                   \"dashboard_prepped_data.RData\")\nload(path)\n```\n\n<!-- Load functions -->\n\n```{r}\nsource(here::here(\"r\", \"format_table.R\"))\nsource(here::here(\"r\", \"gauge_chart.R\"))\n```\n\n<!-- Custom functions -->\n\n```{r, include = FALSE}\n# Merge specified rows of flextable with the same values\n# David Gohel's response to this Stack Overflow question: https://stackoverflow.com/questions/56327151/flextable-how-to-merge-rows-with-duplicate-values-for-some-columns\nmerge_custom <- function(ft, x, columns){\n  z <- rle(x)\n  rows_at <- cumsum(z$lengths) - z$lengths + 1\n\n  for(i in seq_along(rows_at)){\n    for(j in columns)\n      ft <- merge_at(x = ft, i = seq( rows_at[i], \n                                      rows_at[i] + z$lengths[i] - 1), j = j)\n  }\n  ft\n}\n```\n\n\n#  {.sidebar}\n\n```{r, echo=FALSE}\nhead_1 <- \"This dashboard displays statistics for:\\n\\n\"\n\nside_bar_df <- data.frame(\n  names = c(\"File Names\", \"File Names\", \"File Names\", \"Last Modified\"),\n  values = c(basename(detect_tool_data_path), basename(link_data_path),\n               basename(aps_reports_data_path), \n             format(Sys.time(), \"%Y-%m-%d %H:%M %Z\"))\n) \n\nside_bar_df %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.3), unit = \"in\") %>%\n  add_header_lines(head_1) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\") %>%\n  # Merge screening items column groups\n  merge_custom(x = side_bar_df$names, columns = 1) %>%\n  valign(j = 1, valign = \"center\")\n\n```\n\n```{r, echo=FALSE}\nsubjects <- pilot_data %>% select(ri_patient_mrn) %>% unique() %>% nrow()\nclinicians <- pilot_data %>% select(ri_clinician_id_name) %>% unique() %>% nrow()\nsurvey_responses <- pilot_data %>% nrow()\ntime_period <- paste(min(as.Date(pilot_data$ri_date)), \"to\", \n                     max(as.Date(pilot_data$ri_date)))\n\nhead_2 <- \"This data references:\\n\\n\"\n\ndata.frame(\n  names = c(\"Subjects\", \"Clinicians\", \"Survey Responses\", \"Time Period\"),\n  values = c(subjects, clinicians, survey_responses, time_period)\n) %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.2), unit = \"in\") %>%\n  add_header_lines(head_2) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\")\n\n```\n\n\n# All\n\n```{r, include=FALSE}\n# Indicators of EM Module variables\nind_em_vars <- c(\"ri_necessities_3cat_f\", \"ri_environment_3cat_f\", \n                 \"ri_caregiver_3cat_f\", \"ri_sedated_3cat_f\", \n                 \"ri_isolated_3cat_f\", \"ri_anxious_3cat_f\", \n                 \"ri_prohibited_3cat_f\", \"ri_unmet_needs_3cat_f\", \n                 \"ri_injuries_3cat_f\")\n\n# EM type variables\nem_type_vars <- c(\"ri_em_type_1_2cat_f\", \"ri_em_type_2_2cat_f\", \n                  \"ri_em_type_3_2cat_f\", \"ri_em_type_4_2cat_f\", \n                  \"ri_em_type_5_2cat_f\", \"ri_em_type_6_2cat_f\",  \n                  \"ri_em_type_7_2cat_f\", \"ri_em_type_98_2cat_f\",\n                  \"ri_em_type_99_2cat_f\")\n\n# All text box variables\ntext_box_items <- c(\"ri_environment_un_reason\", \"ri_caregiver_oth\",\n                    \"ri_patient_assess\", \"ri_em_no_reason\", \"ri_em_reason\", \n                    \"ri_em_type_other\", \"ri_aps_no_reason\", \n                    \"ri_refer_svcs_specify\", \"ri_reflection_notes\")\n```\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = subjects\n)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n\nstarted_screenings <- pilot_data %>% filter(if_any(\n  .cols = c(all_of(ind_em_vars)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as having values for the MRN and EM status impression. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- pilot_data %>% filter(if_all(\n  .cols = c(ri_patient_mrn, suspect_em_2cat),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- pilot_data %>% filter(if_all(\n  .cols = all_of(ind_em_vars),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em_2cat )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n<!-- One of the days (11/11) could not be viewed. This impacted the reporting guidelines for TX link. The number of clicks could have either any number from 0 to 3 for that day.-->\n\n```{r}\n#| echo: false\n#| title: Reporting Guidance Link Clicks\n#| content: valuebox\n\nrg_link_clicks <- link_data %>% filter(grepl(\"^detect_\", link)) %>% \n  filter(hits >= 1) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"link\",\n  color = \"vb-blue\",\n  value = rg_link_clicks\n)\n```\n\n```{r}\n#| echo: false\n#| title: Abuse Types Link Clicks\n#| content: valuebox\n\ndef_link_clicks <- link_data %>% filter(grepl(\"elder_abuse_definitions\", link)) %>% \n  filter(hits >= 1) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"link\",\n  color = \"vb-blue\",\n  value = def_link_clicks\n)\n```\n\n## Row {.flow}\n\n```{r, echo = FALSE}\n#| title: Missingness Summary\n# Plot missing data\ngg_missing <- ggplot(missing_plot_data, aes(x = count, y = label, fill = missingness_3cat_f)) +\n  geom_bar(stat = \"identity\", color = \"transparent\", show.legend = TRUE) +\n  scale_fill_manual(\"Legend\", values = c(\"Missing\" = \"#AFD5E0\", \n                                         \"Not missing\" = \"#219ebc\",\n                                         \"Not applicable\" = \"#023047\"),\n                    drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\n\nggplotly(gg_missing,tooltip = c(\"count\")) %>%\nlayout(\n       xaxis = list(fixedrange = TRUE),\n       yaxis = list(fixedrange = TRUE)\n)\n```\n\n## Row\n\n```{r, echo = FALSE}\n#| title: Textbox Data\nDT::datatable(text_box_table_data, options = list(autoWidth = TRUE), \n              colnames = c(\"Record ID\", \"Date\", \"Variable Label\", \n                           \"Text Box Content\"),\n              filter = list(\n                position = 'top', clear = FALSE)\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r}\n#| title: Indicators of EM Module Summary\ngg_ind_em <- ggplot(ind_em_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=FALSE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#219ebc\", \n                               \"No\" = \"#AFD5E0\",\n                               \"Unable to assess\" = \"#023047\",\n                               \"NA\" = \"#3C5967\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_ind_em, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n```{r, echo = FALSE}\n#| title: Suspect EM Summary\n\ngg_sus_em <- ggplot(suspect_em_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#BAAE21\", \n                               \"No\" = \"#CCC99E\",\n                               \"NA\" = \"#454002\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_sus_em, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n```{r, echo = FALSE}\n#| title: EM Type Summary\n\ngg_em_type <- ggplot(em_type_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#BA21B3\", \n                               \"No\" = \"#CC9EC9\",\n                               \"NA\" = \"#460242\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_em_type, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n## Row \n\n### Column {width=\"50%\"}\n\n```{r, echo = FALSE}\n#| title: Intent to Report to APS Summary\n\ngg_report <- ggplot(report_plot_data, \n                      aes(y = label, fill = value, \n                          text = paste0(\"Count: \", after_stat(count)))) +\n  geom_bar(show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#21BA97\", \n                               \"No\" = \"#9eccc1\",\n                               \"NA\" = \"#024536\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_report, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n### Column {width=\"50%\"}\n\n```{r, echo = FALSE}\n#| title: Number of Intended APS Reports that Were Made\n\n# sectors <- gaugeSectors(\n#   success = c(goal*(80/100), goal*(100/100)),\n#   warning = c(goal*(60/100), goal*(79/100)),\n#   danger = c(goal*(0/100), goal*(59/100)),\n#   colors = c(\"#70bfb3\", \"#ffb700\", \"#ff625e\")\n# )\n# \n# gauge(completed_interviews, min = 0, max = goal,\n#       sectors = sectors)\n\n gauge_chart(reports_made, reports_intended)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Indicators of EM Module By Suspect EM\nfacet_labels <- c(\n                    `Yes` = \"EM Suspected\",\n                    `No` = \"EM not Suspected\"\n                    )\n\ngg_ind_sus_em <- ggplot(ind_sus_em_plot_data, \n                      aes(x = perc, y = ind_em_label, fill = em_ind_value,\n                          text = paste0(\"Count: \", count, \"\\nProportion: \",\n                                        perc_label))) +\n  geom_bar(stat = \"identity\", show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#219ebc\", \n                               \"No\" = \"#AFD5E0\",\n                               \"Unable to assess\" = \"#023047\",\n                               \"NA\" = \"#3C5967\"), drop = FALSE) +\n  scale_y_discrete(drop = FALSE) +\n  theme_bw() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) +\n  facet_wrap(~ suspect_em_2cat_f, labeller = as_labeller(facet_labels), \n  scales = \"free_x\")\n\nggplotly(gg_ind_sus_em, tooltip = c(\"text\")) %>%\n    layout(\n           xaxis = list(fixedrange = TRUE),\n           yaxis = list(\n             # range = list(0,10),\n             fixedrange = TRUE)\n    ) \n```\n\n```{r, echo = FALSE}\n#| title: Table\nind_sus_em_table_data %>%\n  DT::datatable(., class = list(stripe = FALSE), \n                options = list(autoWidth = TRUE, columnDefs = list(list(\n              targets = 1,  # Column index starts from 0\n              visible = FALSE\n            ))), \n              colnames = c(\"Shade column\", \"Abuse Type Suspected\", \"Response\", \"N\", \n                           \"Proportion\"),\n              filter = list(\n                position = 'top', clear = FALSE)\n) %>% formatStyle(\n  'shade_col',\n  target = 'row',\n  backgroundColor = styleEqual(c(0, 1), c('transparent', '#EEEEEE'))\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: EM Types When EM is Suspected - Plot\n\ngg_sus_type_em <- ggplot(sus_type_em_plot_data, \n                      aes(x = count, y = label, fill = em_type_value, \n                          text = paste0(\"Count: \", count, \"\\nProportion: \",\n                                        perc))) +\n  geom_bar(stat = \"identity\", show.legend=TRUE) +\n  scale_fill_manual(\"Legend\",\n                    values = c(\"Yes\" = \"#BA21B3\", \n                               \"No\" = \"#CC9EC9\",\n                               \"NA\" = \"#460242\"), drop = FALSE) +\n  theme_classic() + \n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nggplotly(gg_sus_type_em, tooltip = c(\"text\")) %>%\n  layout(\n         xaxis = list(fixedrange = TRUE),\n         yaxis = list(\n           # range = list(0,10),\n           fixedrange = TRUE)\n  )\n```\n\n```{r, echo = FALSE}\n#| title: Table\nind_sus_em_table_data %>%\n  DT::datatable(., class = list(stripe = FALSE), \n                options = list(autoWidth = TRUE, columnDefs = list(list(\n              targets = 1,  # Column index starts from 0\n              visible = FALSE\n            ))), \n              colnames = c(\"Shade column\",\"Suspect EM\", \n                           \"Indicators of EM module\", \"Response\", \"N\", \n                           \"Proportion\"),\n              filter = list(\n                position = 'top', clear = FALSE)\n) %>% formatStyle(\n  'shade_col',\n  target = 'row',\n  backgroundColor = styleEqual(c(0, 1), c('transparent', '#EEEEEE'))\n)\n```\n\n\n\n\n"},"formats":{"dashboard":{"identifier":{"display-name":"HTML","target-format":"dashboard","base-format":"dashboard"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":"all","plotly-connected":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"detect_tool_pilot_dashboard.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","page-layout":"custom","title":"DETECT Tool Pilot","scrolling":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}