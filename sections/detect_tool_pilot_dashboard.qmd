---
title: "DETECT Tool Pilot"
format: dashboard
scrolling: true 
---

```{r, include = FALSE}
# Libraries
library(here)
library(dplyr)
library(flextable)
library(officer)
library(ggplot2)
library(plotly)
library(crosstalk)
library(DT)
```

<!-- Load data -->

```{r, include = FALSE}
detect_tool_data_path <- here::here("data", "detect_tool_pilot",
                                    "detect_tool_pilot_cleaned.RDS")
link_data_path <- here::here("data", "detect_tool_pilot",
                               "detect_tool_pilot_link_hits_long_format.RDS")
aps_reports_data_path <- here::here("data", "aps_reports",
                                    "aps_reports_cleaned.RDS")

pilot_data <- readRDS(detect_tool_data_path)
link_data <- readRDS(link_data_path)

var_desc <- readRDS(here::here("data_management", "detect_tool_pilot", 
                               "variable_descriptions.RDS"))

path <- here::here("data", "detect_tool_pilot",
                   "dashboard_prepped_data.RData")
load(path)
```

<!-- Load functions -->

```{r}
source(here::here("r", "format_table.R"))
source(here::here("r", "gauge_chart.R"))
```

<!-- Custom functions -->

```{r, include = FALSE}
# Merge specified rows of flextable with the same values
# David Gohel's response to this Stack Overflow question: https://stackoverflow.com/questions/56327151/flextable-how-to-merge-rows-with-duplicate-values-for-some-columns
merge_custom <- function(ft, x, columns){
  z <- rle(x)
  rows_at <- cumsum(z$lengths) - z$lengths + 1

  for(i in seq_along(rows_at)){
    for(j in columns)
      ft <- merge_at(x = ft, i = seq( rows_at[i], 
                                      rows_at[i] + z$lengths[i] - 1), j = j)
  }
  ft
}
```


#  {.sidebar}

```{r, echo=FALSE}
head_1 <- "This dashboard displays statistics for:\n\n"

side_bar_df <- data.frame(
  names = c("File Names", "File Names", "File Names", "Last Modified"),
  values = c(basename(detect_tool_data_path), basename(link_data_path),
               basename(aps_reports_data_path), 
             format(Sys.time(), "%Y-%m-%d %H:%M %Z"))
) 

side_bar_df %>% flextable() %>%
  delete_part(part = "header") %>%
  bold(j = 1, part = "body") %>%
  border_remove() %>%
  width(j = c(1,2), width = c(1.2, 1.3), unit = "in") %>%
  add_header_lines(head_1) %>%
  color(j = c(1,2), color = "#6c757d", part = "body") %>%
  color(i = c(1), color = "#6c757d", part = "header") %>%
  bg(bg = "#ffffff", part = "body") %>%
  hline(part = "body", border = fp_border(color = "#f3f3f3")) %>%
  height_all(height = 0.5, unit = "in") %>%
  hrule(rule = "exact") %>%
  # Merge screening items column groups
  merge_custom(x = side_bar_df$names, columns = 1) %>%
  valign(j = 1, valign = "center")

```

```{r, echo=FALSE}
subjects <- pilot_data %>% select(ri_patient_mrn) %>% unique() %>% nrow()
clinicians <- pilot_data %>% select(ri_clinician_id_name) %>% unique() %>% nrow()
survey_responses <- pilot_data %>% nrow()
time_period <- paste(min(as.Date(pilot_data$ri_timestamp_start)), "to", 
                     max(as.Date(pilot_data$timestamp_end)))

head_2 <- "This data references:\n\n"

data.frame(
  names = c("Subjects", "Clinicians", "Survey Responses", "Time Period"),
  values = c(subjects, clinicians, survey_responses, time_period)
) %>% flextable() %>%
  delete_part(part = "header") %>%
  bold(j = 1, part = "body") %>%
  border_remove() %>%
  width(j = c(1,2), width = c(1.2, 1.2), unit = "in") %>%
  add_header_lines(head_2) %>%
  color(j = c(1,2), color = "#6c757d", part = "body") %>%
  color(i = c(1), color = "#6c757d", part = "header") %>%
  bg(bg = "#ffffff", part = "body") %>%
  hline(part = "body", border = fp_border(color = "#f3f3f3")) %>%
  height_all(height = 0.5, unit = "in") %>%
  hrule(rule = "exact")

```


# All

```{r, include=FALSE}
# Indicators of EM Module variables
ind_em_vars <- c("ri_necessities_3cat_f", "ri_environment_3cat_f", 
                 "ri_caregiver_3cat_f", "ri_sedated_3cat_f", 
                 "ri_isolated_3cat_f", "ri_anxious_3cat_f", 
                 "ri_prohibited_3cat_f", "ri_unmet_needs_3cat_f", 
                 "ri_injuries_3cat_f")

# EM type variables
em_type_vars <- c("ri_em_type_1_2cat_f", "ri_em_type_2_2cat_f", 
                  "ri_em_type_3_2cat_f", "ri_em_type_4_2cat_f", 
                  "ri_em_type_5_2cat_f", "ri_em_type_6_2cat_f",  
                  "ri_em_type_7_2cat_f", "ri_em_type_98_2cat_f",
                  "ri_em_type_99_2cat_f")

# All text box variables
text_box_items <- c("ri_environment_un_reason", "ri_caregiver_oth",
                    "ri_patient_assess", "ri_em_no_reason", "ri_em_reason", 
                    "ri_em_type_other", "ri_aps_no_reason", 
                    "ri_refer_svcs_specify", "ri_reflection_notes")
```

## Row {height= "5%" .fill}

<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->

```{r}
#| echo: false
#| title: Screenings Started
#| content: valuebox

started_screenings <- pilot_data %>% filter(if_any(
  .cols = c(all_of(ind_em_vars)),
  .fns = ~!is.na(.x)
)) %>% nrow()

# Create value box  
list(
  icon = "ui-checks-grid",
  color = "vb-green",
  value = started_screenings
)
```

<!-- Completed screening is defined as when all required fields are completed. -->

```{r}
#| echo: false
#| title: Screenings Completed
#| content: valuebox

# completed_screenings <- pilot_data %>% filter(if_all(
#   .cols = c(ri_patient_mrn, suspect_em_2cat),
#   .fns = ~!is.na(.x)
# )) %>% nrow()

completed_screenings <- pilot_data %>% 
  filter(reporting_instrument_complete == "Complete") %>% nrow()

# Create value box  
list(
  icon = "check2-circle",
  color = "vb-green",
  value = completed_screenings
)
```

```{r}
#| echo: false
#| title: Unique MRNs
#| content: valuebox

# Create value box  
list(
  icon = "person",
  color = "vb-green",
  value = subjects
)
```

## Row {height= "5%" .fill}

```{r}
#| echo: false
#| title: Screening Items Complete but EM Status Impression Incomplete
#| content: valuebox

em_status_incomplete <- pilot_data %>% filter(if_all(
  .cols = all_of(ind_em_vars),
  .fns = ~ !is.na(.x)
)) %>% filter(is.na(suspect_em_2cat )) %>% nrow()

# Create value box  
list(
  icon = "clipboard2-x",
  color = "vb-green",
  value = em_status_incomplete
)
```

```{r}
#| echo: false
#| title: EM Suspected
#| content: valuebox

suspect_em_count <- pilot_data %>% filter(suspect_em_2cat_f == "Yes") %>% 
  nrow()

# Create value box  
list(
  icon = "search",
  color = "vb-green",
  value = suspect_em_count
)
```


```{r}
#| echo: false
#| title: Intended Reports
#| content: valuebox

ri_count <- reports_intended %>% nrow()

# Create value box  
list(
  icon = "file-earmark",
  color = "vb-green",
  value = ri_count
)
```

## Row {height= "5%" .fill}

```{r}
#| echo: false
#| title: Intended Reports Made
#| content: valuebox

irm_count <- intended_reports_made %>% nrow()

# Create value box  
list(
  icon = "file-earmark-check",
  color = "vb-green",
  value = irm_count
)
```

```{r}
#| echo: false
#| title: Reporting Guidance Link Clicks
#| content: valuebox

rg_link_clicks <- link_data %>% filter(grepl("^detect_", link)) %>% 
  filter(hits >= 1) %>% nrow()

# Create value box  
list(
  icon = "link",
  color = "vb-green",
  value = rg_link_clicks
)
```

```{r}
#| echo: false
#| title: Abuse Types Link Clicks
#| content: valuebox

def_link_clicks <- link_data %>% filter(grepl("elder_abuse_definitions", link)) %>% 
  filter(hits >= 1) %>% nrow()

# Create value box  
list(
  icon = "link",
  color = "vb-green",
  value = def_link_clicks
)
```

## Row {.flow}

```{r, echo = FALSE}
#| title: Missingness Summary
# Plot missing data
gg_missing <- ggplot(missing_plot_data, aes(x = count, y = label, fill = missingness_3cat_f)) +
  geom_bar(stat = "identity", color = "transparent", show.legend = TRUE) +
  scale_fill_manual("Legend", values = c("Missing" = "#AFD5E0", 
                                         "Not missing" = "#219ebc",
                                         "Not applicable" = "#023047"),
                    drop = FALSE) +
  theme_classic() + 
  theme(axis.title.x=element_blank(),
        axis.title.y=element_blank())


ggplotly(gg_missing,tooltip = c("count")) %>%
layout(
       xaxis = list(fixedrange = TRUE),
       yaxis = list(fixedrange = TRUE)
)
```

## Row

```{r, echo = FALSE}
#| title: Textbox Data
DT::datatable(text_box_table_data, 
              options = list(autoWidth = TRUE, 
                             columnDefs = list(
                               list(visible=FALSE, 
                                    targets = c("calc_institution_7cat_f")))), 
              colnames = c("Record ID", "Date", "Institution", "Variable Label", 
                           "Text Box Content"),
              filter = list(
                position = 'top', clear = FALSE)
)
```


## Row

### Column {.tabset}

```{r}
#| title: Indicators of EM Module Summary
gg_ind_em <- ggplot(ind_em_plot_data_all, aes(x = count, y = label, fill = value, 
                          text = paste0("Count: ", count, "\nProportion: ",
                                        perc))) +
  geom_bar(stat = "identity", show.legend=FALSE) +
  scale_fill_manual("Legend",
                    values = c("Yes" = "#219ebc", 
                               "No" = "#AFD5E0",
                               "Unable to assess" = "#023047",
                               "NA" = "#3C5967"), drop = FALSE) +
  theme_classic() + 
  theme(axis.title.x=element_blank(),
        axis.title.y=element_blank())

ggplotly(gg_ind_em, tooltip = c("text")) %>%
  layout(
         xaxis = list(fixedrange = TRUE),
         yaxis = list(
           # range = list(0,10),
           fixedrange = TRUE)
  )
```

```{r, echo = FALSE}
#| title: EM Type Summary

gg_em_type <- ggplot(em_type_plot_data_all, 
                      aes(x = count, y = label, fill = value, 
                          text = paste0("Count: ", count, "\nProportion: ",
                                        perc))) +
  geom_bar(stat = "identity", show.legend=FALSE) +
  scale_fill_manual("Legend",
                    values = c("Yes" = "#BA21B3", 
                               "No" = "#CC9EC9",
                               "NA" = "#460242"), drop = FALSE) +
  theme_classic() + 
  theme(axis.title.x=element_blank(),
        axis.title.y=element_blank())

ggplotly(gg_em_type, tooltip = c("text")) %>%
  layout(
         xaxis = list(fixedrange = TRUE),
         yaxis = list(
           # range = list(0,10),
           fixedrange = TRUE)
  )
```

## Row

### Column {.tabset}

```{r, echo = FALSE}
#| title: Indicators of EM Module By Suspect EM
facet_labels <- c(
                    `Yes` = "EM Suspected",
                    `No` = "EM not Suspected"
                    )

gg_ind_sus_em <- ggplot(ind_sus_em_plot_data, 
                      aes(x = perc, y = ind_em_label, fill = em_ind_value,
                          text = paste0("Count: ", count, "\nProportion: ",
                                        perc_label))) +
  geom_bar(stat = "identity", show.legend=TRUE) +
  scale_fill_manual("Legend",
                    values = c("Yes" = "#219ebc", 
                               "No" = "#AFD5E0",
                               "Unable to assess" = "#023047",
                               "NA" = "#3C5967"), drop = FALSE) +
  scale_y_discrete(drop = FALSE) +
  theme_bw() + 
  theme(axis.title.x=element_blank(),
        axis.title.y=element_blank()) +
  facet_wrap(~ suspect_em_2cat_f, labeller = as_labeller(facet_labels), 
  scales = "free_x")

ggplotly(gg_ind_sus_em, tooltip = c("text")) %>%
    layout(
           xaxis = list(fixedrange = TRUE),
           yaxis = list(
             # range = list(0,10),
             fixedrange = TRUE)
    ) 
```

```{r, echo = FALSE}
#| title: Table
DT::datatable(ind_sus_em_table_data, class = list(stripe = FALSE),
              options = list(autoWidth = TRUE, 
                             columnDefs = list(
                               list(visible=FALSE, 
                                    targets = c("shade_col")))), 
              colnames = c("Shade column","EM Suspected",  "EM Type Suspected", 
                           "Response", "N", "Proportion"),
              filter = list(
                position = 'top', clear = FALSE)
) %>% formatStyle(
  'shade_col',
  target = 'row',
  backgroundColor = styleEqual(c(0, 1), c('transparent', '#EEEEEE'))
)
```


## Row

### Column {.tabset}

```{r, echo = FALSE}
#| title: EM Types When EM is Suspected - Plot

gg_sus_type_em <- ggplot(sus_type_em_plot_data, 
                      aes(x = count, y = label, fill = em_type_value, 
                          text = paste0("Count: ", count, "\nProportion: ",
                                        perc))) +
  geom_bar(stat = "identity", show.legend=TRUE) +
  scale_fill_manual("Legend",
                    values = c("Yes" = "#BA21B3", 
                               "No" = "#CC9EC9",
                               "NA" = "#460242"), drop = FALSE) +
  theme_classic() + 
  theme(axis.title.x=element_blank(),
        axis.title.y=element_blank())

ggplotly(gg_sus_type_em, tooltip = c("text")) %>%
  layout(
         xaxis = list(fixedrange = TRUE),
         yaxis = list(
           # range = list(0,10),
           fixedrange = TRUE)
  )
```

```{r, echo = FALSE}
#| title: Table
ind_sus_em_table_data %>%
  DT::datatable(., class = list(stripe = FALSE), 
                options = list(autoWidth = TRUE, columnDefs = list(list(
              targets = 1,  # Column index starts from 0
              visible = FALSE
            ))), 
              colnames = c("Shade column","Suspect EM", 
                           "Indicators of EM module", "Response", "N", 
                           "Proportion"),
              filter = list(
                position = 'top', clear = FALSE)
) %>% formatStyle(
  'shade_col',
  target = 'row',
  backgroundColor = styleEqual(c(0, 1), c('transparent', '#EEEEEE'))
)
```




