{
  "hash": "6c6838b34fb88d944acfbdf17ce2abfd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Clean APS reports data imported from REDCap\"\n---\n\n\n# Overview\n\nIn this file, we do some initial cleaning of the APS reports data imported from REDCap to prepare it for dashboard summary. \n\n\n# Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dplyr' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'readr' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'purrr' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'stringr' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'here' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(redcapAPI)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'redcapAPI' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(keyring)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'keyring' was built under R version 4.3.2\n```\n\n\n:::\n:::\n\n\n\n# Load custom functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"R\", \"recoding_factoring_relocating.R\"))\nsource(here::here(\"R\", \"nums_to_na.R\"))\nsource(here::here(\"R\", \"data_cleaning_tools.R\"))\n```\n:::\n\n\n\n# Load data\n\nAn API token unique to each user and project can be requested on REDCap. This API token can be saved on your system using the keyring `key_set` function as follows:\nkeyring::key_set(\"aps_reports_redcap_api\"). A password box will pop-up and your unique token can be entered into the text box. Once this is done once, it doesn't need to be repeated unless a new token is requested on REDCap. The code below can then be run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define REDCap API URL API token\napi_token <-  keyring::key_get(\"aps_reports_redcap_api\") # Get saved REDCap API token\nredcap_url <- \"https://redcap.uth.tmc.edu/api/\"\n\n# Establish connection to the REDCap project\nrcon <- redcapConnection(url = redcap_url, token = api_token)\n\n# Export records with coded values\naps  <- exportRecordsTyped(rcon, form = \"aps_reporting\",\n                                rawOrLabel = \"raw\", factor = FALSE) %>% \n  clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in warnZeroCodedFieldPresent(names(Raw), warn_zero_coded): Zero-coded\ncheck fields found. Verify that casting is correct for ar_dx_mci_dementia___0.\nSee `?exportRecordsTyped`, Zero-Coded Check Fields.\n```\n\n\n:::\n:::\n\n\n\n# Create a dataframe with variable descriptions\n\nExtract the column names from the data and labels data frames to create a data frame of variable descriptions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add missing variable labels for REDCap variables lost with API\nattributes(aps$redcap_survey_identifier)$label <- \"Survey Identifier\"\nattributes(aps$aps_reporting_timestamp)$label <- \"Survey Timestamp\"\nattributes(aps$aps_reporting_complete)$label <-\" Complete?\"\n\n# Create dataframe\nvars_labels <- sapply(aps,\n       function(x){attr(x,\"label\")})\n\nvar_desc <- data.frame(variable = names(vars_labels), \n                       description = unname(vars_labels), \n                       row.names = NULL) %>%\n  mutate(id = row_number())\n\nvar_desc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   variable\n1                   form_id\n2  redcap_survey_identifier\n3   aps_reporting_timestamp\n4        ar_timestamp_start\n5                   ar_date\n6               ar_latitude\n7              ar_longitude\n8                   ar_user\n9               ar_user_oth\n10           ar_institution\n11         ar_clinician_bcm\n12     ar_clinician_bcm_oth\n13          ar_clinician_jh\n14      ar_clinician_jh_oth\n15        ar_clinician_ucsf\n16    ar_clinician_ucsf_oth\n17         ar_clinician_uab\n18     ar_clinician_uab_oth\n19        ar_clinician_utsw\n20    ar_clinician_utsw_oth\n21         ar_clinician_lbj\n22     ar_clinician_lbj_oth\n23         ar_clinician_utp\n24     ar_clinician_utp_oth\n25          ar_clinician_id\n26        ar_aps_report_num\n27       ar_aps_report_date\n28       ar_aps_report_meth\n29   ar_aps_report_meth_oth\n30                   ar_mrn\n31                   ar_dob\n32                   ar_sex\n33               ar_sex_oth\n34                ar_race_1\n35                ar_race_2\n36                ar_race_3\n37                ar_race_4\n38                ar_race_5\n39               ar_race_98\n40               ar_race_99\n41              ar_race_oth\n42              ar_hispanic\n43          ar_relationship\n44      ar_relationship_oth\n45        ar_household_size\n46                   ar_zip\n47        ar_encounter_date\n48 ar_enc_aps_date_diff_day\n49          ar_visit_reason\n50      ar_visit_reason_oth\n51     ar_dx_mci_dementia_0\n52     ar_dx_mci_dementia_1\n53     ar_dx_mci_dementia_2\n54    ar_dx_mci_dementia_77\n55   ar_functional_status_1\n56   ar_functional_status_2\n57   ar_functional_status_3\n58   ar_functional_status_4\n59   ar_functional_status_5\n60  ar_functional_status_98\n61  ar_functional_status_77\n62 ar_functional_status_oth\n63                  ar_note\n64   aps_reporting_complete\n                                                                                                         description\n1                                                                                                            Form ID\n2                                                                                                  Survey Identifier\n3                                                                                                   Survey Timestamp\n4                                                                                               Form start timestamp\n5                                                                                                          Form date\n6                                                                                                      Form latitude\n7                                                                                                     Form longitude\n8                                                                                 Person submitting this DETECT form\n9                                                                        Specify other person submitting DETECT form\n10                                                                                                       Institution\n11                                                                                             Baylor clinician name\n12                                                                               Specify other Baylor clinician name\n13                                                                                      Johns Hopkins clinician name\n14                                                                        Specify other Johns Hopkins clinician name\n15                                                                                               UCSF clinician name\n16                                                                                 Specify other UCSF clinician name\n17                                                                                                UAB clinician name\n18                                                                                  Specify other UAB clinician name\n19                                                                                               UTSW clinician name\n20                                                                                 Specify other UTSW clinician name\n21                                                                                                LBJ clinician name\n22                                                                                  Specify other LBJ clinician name\n23                                                                                                UTP clinician name\n24                                                                                  Specify other UTP clinician name\n25                                                                                                      Clinician ID\n26                                                                                                 APS report number\n27                                                                                                   APS report date\n28                                                                                      APS report submission method\n29                                                                        Specify other APS report submission method\n30                                                                                       Medical record number (MRN)\n31                                                                                                     Date of birth\n32                                                                                                               Sex\n33                                                                                                 Specify other sex\n34                                                                   Race (choice=American Indian or Alaskan Native)\n35                                                                                               Race (choice=Asian)\n36                                                                           Race (choice=Black or African American)\n37                                                           Race (choice=Native Hawaiian or Other Pacific Islander)\n38                                                                                               Race (choice=White)\n39                                                                            Race (choice=Not listed {ar_race_oth})\n40                                                                                             Race (choice=Unknown)\n41                                                                                                Specify other race\n42                                                                             Hispanic, Latino/a, or Spanish origin\n43                                                                                               Relationship status\n44                                                                                 Specify other relationship status\n45                                                                             Household size, including the patient\n46                                                                                                          ZIP code\n47                                                                                                 Date of encounter\n48                                                         Difference in days between encounter and APS report dates\n49                                                                                                  Reason for visit\n50                                                                                    Specify other reason for visit\n51 Diagnosis of mild cognitive impairment or dementia (choice=No diagnosis of mild cognitive impairment or dementia)\n52                Diagnosis of mild cognitive impairment or dementia (choice=Diagnosis of mild cognitive impairment)\n53                                 Diagnosis of mild cognitive impairment or dementia (choice=Diagnosis of dementia)\n54                                               Diagnosis of mild cognitive impairment or dementia (choice=Unknown)\n55                                                           Functional status (choice=Ambulates without assistance)\n56                Functional status (choice=Ambulates with assistance of others (i.e., caregiver, but not a device))\n57                                             Functional status (choice=Uses assistive device (e.g., cane, walker))\n58                                                                       Functional status (choice=Wheelchair bound)\n59                                                                              Functional status (choice=Bed bound)\n60                                                  Functional status (choice=Not listed {ar_functional_status_oth})\n61                                                                                Functional status (choice=Unknown)\n62                                                                                   Specify other functional status\n63                                                                                                     Note/comments\n64                                                                                                         Complete?\n   id\n1   1\n2   2\n3   3\n4   4\n5   5\n6   6\n7   7\n8   8\n9   9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20\n21 21\n22 22\n23 23\n24 24\n25 25\n26 26\n27 27\n28 28\n29 29\n30 30\n31 31\n32 32\n33 33\n34 34\n35 35\n36 36\n37 37\n38 38\n39 39\n40 40\n41 41\n42 42\n43 43\n44 44\n45 45\n46 46\n47 47\n48 48\n49 49\n50 50\n51 51\n52 52\n53 53\n54 54\n55 55\n56 56\n57 57\n58 58\n59 59\n60 60\n61 61\n62 62\n63 63\n64 64\n```\n\n\n:::\n:::\n\n\n\n# Convert all factor variables to character variables\n\nBefore the appropriate factor variables with the appropriate levels can be set, the ones automatically created need to be removed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naps_rep <- aps %>%\n  mutate(\n    across(\n      .cols = where(is.factor),\n      .fns = ~ as.character(.x)\n    )\n  )\n```\n:::\n\n\n# Convert the checkbox variables into binary forms\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheckbox_vars <- aps_rep %>% select(where(is.character)) %>%\n  select(which(sapply(., function(x) any(x == \"Unchecked\")))) %>% names()\n\ncheckbox_vars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ar_race_1\"               \"ar_race_2\"              \n [3] \"ar_race_3\"               \"ar_race_4\"              \n [5] \"ar_race_5\"               \"ar_race_98\"             \n [7] \"ar_race_99\"              \"ar_dx_mci_dementia_0\"   \n [9] \"ar_dx_mci_dementia_1\"    \"ar_dx_mci_dementia_2\"   \n[11] \"ar_dx_mci_dementia_77\"   \"ar_functional_status_1\" \n[13] \"ar_functional_status_2\"  \"ar_functional_status_3\" \n[15] \"ar_functional_status_4\"  \"ar_functional_status_5\" \n[17] \"ar_functional_status_98\" \"ar_functional_status_77\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to binary\naps_rep <- aps_rep %>%\n  mutate(\n    across(\n      .cols = all_of(checkbox_vars),\n      .fns = ~ case_when(\n        .x == \"Unchecked\" ~ 0,\n        .x == \"Checked\" ~ 1\n      )\n    )\n  )\n```\n:::\n\n\n\n## Numeric and factor variables\n\n### Person submitting\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_user\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debbie Freeland, MD\"     \"Faith Atai, MD\"         \n[3] \"Julia Hiner, MD\"         \"Kristina Little, MD\"    \n[5] \"Maria Yefimova, PhD, MS\" \"Marianthe Grammas, MD\"  \n[7] \"Not listed\"              \"Thomas Cudjoe, MD, MPH\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Kristina Little, MD\" = 11, \"Thomas Cudjoe, MD, MPH\" = 21, \n    \"Maria Yefimova, PhD, MS\" = 31, \"Marianthe Grammas, MD\" = 41, \n    \"Debbie Freeland, MD\" = 51, \"Julia Hiner, MD\" = 61, \"Faith Atai, MD\" = 71,\n    \"Not listed\" = 98\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"8cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Institution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_institution\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Baylor College of Medicine - BT House Calls\"\n[2] \"Johns Hopkins - JHOME\"                      \n[3] \"UCSF - Care at Home Program\"                \n[4] \"University of Alabama - UAB House Calls\"    \n[5] \"UT Southwestern - COVE\"                     \n[6] \"UTH Houston - LBJ House Calls\"              \n[7] \"UTH Houston - UT Physicians House Calls\"    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Baylor College of Medicine - BT House Calls\" = 1, \n    \"Johns Hopkins - JHOME\" = 2, \n    \"UCSF - Care at Home Program\" = 3,\n    \"University of Alabama - UAB House Calls\" = 4, \n    \"UT Southwestern - COVE\" = 5, \n    \"UTH Houston - LBJ House Calls\" = 6,\n    \"UTH Houston - UT Physicians House Calls\" = 7\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Clinicians\n\nCombine clinician names across all institutions into a single column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclinician_vars <- c(\"ar_clinician_bcm\", \"ar_clinician_bcm_oth\", \n                     \"ar_clinician_jh\", \"ar_clinician_jh_oth\", \n                     \"ar_clinician_ucsf\", \"ar_clinician_ucsf_oth\",\n                     \"ar_clinician_uab\", \"ar_clinician_uab_oth\", \n                     \"ar_clinician_utsw\", \"ar_clinician_utsw_oth\", \n                     \"ar_clinician_lbj\", \"ar_clinician_lbj_oth\", \n                     \"ar_clinician_utp\", \"ar_clinician_utp_oth\")\n\naps_rep <- aps_rep %>% \n  mutate(\n    ar_clinician = coalesce(ar_clinician_utp_oth, ar_clinician_utp, \n                            ar_clinician_lbj_oth, ar_clinician_lbj, \n                            ar_clinician_utsw_oth, ar_clinician_utsw, \n                            ar_clinician_uab_oth, ar_clinician_uab, \n                            ar_clinician_ucsf_oth, ar_clinician_ucsf, \n                            ar_clinician_jh_oth, ar_clinician_jh, \n                            ar_clinician_bcm_oth, ar_clinician_bcm)\n    ) %>% select(-c(all_of(clinician_vars))) %>%\n  relocate(ar_clinician, .after = ar_institution_7cat_f)\n```\n:::\n\n\n### APS report number\n\nRemove non-alphanumeric characters like pounds or dashes and non-applicable entries like \"NA\", \"N/A\" e.t.c.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naps_rep <-  aps_rep %>%\n  mutate(\n    # Remove non-alphanumeric characters\n    ar_aps_report_num = gsub(\"[^a-zA-Z0-9]\", \"\", ar_aps_report_num),\n    # Remove \"NA\" or \"N/A\"\n    ar_aps_report_num = ifelse(ar_aps_report_num == \"NA\" | \n                                   ar_aps_report_num == \"n/a\", NA, \n                                 ar_aps_report_num)\n  )\n```\n:::\n\n\n### APS report method\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_aps_report_meth\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Online\"                         \"Other {ar_aps_report_meth_oth}\"\n[3] \"Phone\"                         \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Online\" = 1, \n    \"Phone\" = 2, \n    \"Other {ar_aps_report_meth_oth}\" = 98\n)\n\nnew_value_labels <- c(\n    \"Online\" = 1, \n    \"Phone\" = 2, \n    \"Other\" = 98\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"3cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- new_value_labels[!new_value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Sex\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_sex\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Female\" \"Male\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Male\" = 1, \n    \"Female\" = 2, \n    \"Not listed {ar_sex_oth}\" = 98,\n    \"Unknown\" = 77\n)\n\nnew_value_labels <- c(\n    \"Male\" = 1, \n    \"Female\" = 2, \n    \"Not listed\" = 98,\n    \"Unknown\" = 77\n)\n\n# NA values\nna_values <- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"3cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- new_value_labels[!new_value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Race\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_cols <- c(\"ar_race_1\", \"ar_race_2\", \"ar_race_3\", \"ar_race_4\", \"ar_race_5\", \n               \"ar_race_98\")\n```\n:::\n\n\n\nCreate a new race-ethnicity variable with the following categories: \"Hispanic, any race\", \"Black, non-Hispanic\", \"White, non-Hispanic\", \"Other race or multiple races, non-Hispanic\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n  \"Hispanic, any race\" = 1, \"Black, non-Hispanic\" = 2, \"White, non-Hispanic\" = 3, \n  \"Other race or multiple races, non-Hispanic\" = 4\n)\n\naps_rep <- aps_rep %>%\n  mutate(\n    race_sum = rowSums(across(.cols = all_of(race_cols))), # Temp column for sum\n    ar_race_6cat = case_when(\n      ar_race_1 == 1 & race_sum == 1 ~ 1, # American Indian or Alaskan Native\n      ar_race_2 == 1 & race_sum == 1 ~ 2, # Asian\n      ar_race_3 == 1 & race_sum == 1 ~ 3, # Black or African American\n      ar_race_4 == 1 & race_sum == 1 ~ 4, # Native Hawaiian or Other Pacific Islander\n      ar_race_5 == 1 & race_sum == 1 ~ 5, # White\n      race_sum > 1 ~ 6, # Multiple races\n      ar_race_98 == 1 & (grepl(\"^ *[\\\"\\']*hispanic[\\\"\\']* *$\", ar_race_oth, \n              ignore.case = TRUE) == FALSE) ~ 6, # Other race (not hispanic),\n      TRUE ~ NA\n    ),\n    ar_race_eth_4cat = case_when(\n      is.na(ar_hispanic) ~ NA_integer_,\n      ar_hispanic == \"Yes\" ~ 1, # \"Hispanic, any race\"\n      ar_race_6cat == 3 & ar_hispanic == \"No\" ~ 2, # \"Black, non-Hispanic\"\n      ar_race_6cat == 5 & ar_hispanic == \"No\" ~ 3, # \"White, non-Hispanic\"\n      TRUE ~ 4, # \"Other race or multiple races, non-Hispanic\"\n    ),\n    ar_race_eth_4cat_f = factor(\n      ar_race_eth_4cat,\n      levels = as.numeric(value_labels),\n      labels = names(value_labels)\n    )\n  ) %>% select(-c(race_sum))\n\n# Relocate new ar_race_6cat, ar_race_eth variables after ar_race_race_oth  \ncols <- c(\"ar_race_eth_4cat_f\", \"ar_race_eth_4cat\", \"ar_race_6cat\") \nfor (col in cols) {\n  aps_rep <- aps_rep %>%\n    dplyr::relocate(all_of(col), .after = ar_race_oth )\n}\n```\n:::\n\n\n### Hispanic\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_hispanic\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No\"      \"Unknown\" \"Yes\"    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Yes\" = 1, \n    \"No\" = 0, \n    \"Unknown\" = 77\n)\n\n# NA values\nna_values <- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Relationship status\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_relationship\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Divorced\"                                             \n[2] \"Living together and unmarried/Common law relationship\"\n[3] \"Married\"                                              \n[4] \"Separated\"                                            \n[5] \"Single/Never married\"                                 \n[6] \"Unknown\"                                              \n[7] \"Widowed\"                                              \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Married\" = 1, \n    \"Living together and unmarried/Common law relationship\" = 2, \n    \"Separated\" = 3,\n    \"Divorced\" = 4,\n    \"Widowed\" = 5,\n    \"Single/Never married\" = 6,\n    \"Not listed {ar_relationship_oth}\" = 98,\n    \"Unknown\" = 77\n)\n\n# Numeric coding for character values in each column of interest\nnew_value_labels <- c(\n    \"Married\" = 1, \n    \"Living together and unmarried/Common law relationship\" = 2, \n    \"Separated\" = 3,\n    \"Divorced\" = 4,\n    \"Widowed\" = 5,\n    \"Single/Never married\" = 6,\n    \"Not listed\" = 98,\n    \"Unknown\" = 77\n)\n\n# NA values\nna_values <- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- new_value_labels[!new_value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Household size\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_household_size\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"       \"2\"       \"3\"       \"4\"       \"5\"       \"6\"       \"7\"      \n[8] \"Unknown\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"1\" = 1, \n    \"2\" = 2, \n    \"3\" = 3,\n    \"4\" = 4,\n    \"5\" = 5,\n    \"6\" = 6,\n    \"7\" = 7,\n    \"8\" = 8,\n    \"9+\" = 9,\n    \"Unknown\" = 77\n)\n\n# NA values\nna_values <- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"9cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Reason for Visit\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_visit_reason\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"New patient for home safety evaluation\"       \n[2] \"New patient for transition of care\"           \n[3] \"New patient to establish care\"                \n[4] \"Not listed\"                                   \n[5] \"Return patient for acute and chronic concerns\"\n[6] \"Return patient for acute concern only\"        \n[7] \"Return patient for chronic concern only\"      \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"New patient to establish care\" = 1, \n    \"New patient for home safety evaluation\" = 2, \n    \"New patient for transition of care\" = 3,\n    \"Return patient for acute concern only\" = 4,\n    \"Return patient for chronic concern only\" = 5,\n    \"Return patient for acute and chronic concerns\" = 6,\n    \"Not listed\" = 98\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep <- aps_rep |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Cognitive impairment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ar_dx_mci_dementia_0\", \"ar_dx_mci_dementia_1\", \"ar_dx_mci_dementia_2\",  \n          \"ar_dx_mci_dementia_77\")\nget_values(aps_rep, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0\" \"1\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels_4cat <- c(\n    \"No diagnosis of mild cognitive impairment or dementia\" = 0, \n    \"Diagnosis of mild cognitive impairment\" = 1, \n    \"Diagnosis of dementia\" = 2,\n    \"Diagnosis of both mild cognitive impairment and dementia\" = 3\n)\n\nvalue_labels_2cat <- c(\n    \"No diagnosis of mild cognitive impairment or dementia\" = 0, \n    \"Diagnosis of mild cognitive impairment or dementia\" = 1\n)\n\naps_rep <- aps_rep %>% \n  mutate(\n    dx_sum = rowSums(across(.cols = all_of(cols))), # Temp column for sum\n    ar_dx_imp_4cat = case_when(\n      ar_dx_mci_dementia_0 == 1 & dx_sum == 1 ~ 0,\n      ar_dx_mci_dementia_1 == 1 & dx_sum == 1 ~ 1,\n      ar_dx_mci_dementia_2 == 1 & dx_sum == 1 ~ 2,\n      ar_dx_mci_dementia_1 == 1 & ar_dx_mci_dementia_2 == 1 ~ 3,\n      ar_dx_mci_dementia_77 == 1 & dx_sum == 1 ~ NA_integer_\n    ),\n    ar_dx_imp_4cat_f = factor(\n      ar_dx_imp_4cat,\n      levels = as.numeric(value_labels_4cat),\n      labels = names(value_labels_4cat)\n    ),\n    ar_dx_imp_2cat = case_when(\n      ar_dx_imp_4cat == 0 ~ 0,\n      ar_dx_imp_4cat == 1 | ar_dx_imp_4cat == 2 | ar_dx_imp_4cat == 3 ~ 1,\n      TRUE ~ NA_integer_\n    ),\n    ar_dx_imp_2cat_f = factor(\n      ar_dx_imp_2cat,\n      levels = as.numeric(value_labels_2cat),\n      labels = names(value_labels_2cat)\n    )\n  ) %>% select(-c(dx_sum))\n\n# Relocate new variables after ar_dx_mci_dementia_77\ncols <- c(\"ar_dx_imp_2cat_f\", \"ar_dx_imp_2cat\", \"ar_dx_imp_4cat_f\", \n          \"ar_dx_imp_4cat\") \n\nfor (col in cols) {\n  aps_rep <- aps_rep %>%\n    dplyr::relocate(all_of(col), .after = ar_dx_mci_dementia_77)\n}\n```\n:::\n\n\n# Update variable descriptions dataframe with new variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get df of variables without descriptions\nno_desc <- names(aps_rep) %>% \n  # Subset new variables\n  setdiff(., var_desc$variable) %>%\n  list() %>%\n  # Convert list of new variables into dataframe\n  as.data.frame(col.names = \"variable\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add descriptions to variables with names that were created by adding suffixes \n# to names of original variables\nvars_suffix <- no_desc %>%\n  # Join descriptions from var_desc dataframe to new data frame \n  mutate(\n    no_suffix = gsub(\"_[0-9]+cat[_f]*\", \"\", x = variable)\n  ) %>% inner_join(var_desc, by = c(\"no_suffix\" = \"variable\")) %>%\n  # remove \"no_suffix\" variable\n  select(-c(no_suffix))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add descriptions for remaining variables\nno_match_vars <- no_desc %>%\n  filter(!(variable %in% vars_suffix$variable))\n\nno_match_vars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            variable\n1       ar_clinician\n2       ar_race_6cat\n3   ar_race_eth_4cat\n4 ar_race_eth_4cat_f\n5     ar_dx_imp_4cat\n6   ar_dx_imp_4cat_f\n7     ar_dx_imp_2cat\n8   ar_dx_imp_2cat_f\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nno_match_vars <- no_match_vars %>% tibble::add_column(\n  description = \n    c(\"Clinician name\", \"Race\", \n      rep(\"Race (Black, White, Other) and Ethnicity\", 2),\n\n      rep(\"Diagnosis of mild cognitive impairment or dementia\", 4)\n      ),\n  id = c(25.1, 41.1, 41.2, 41.3, 54.1, 54.2, 54.4, 54.5)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine all the variables with their descriptions\nvar_desc <- bind_rows(var_desc, vars_suffix, no_match_vars) %>% arrange(id) %>%\n  select(-c(id))\n\n# Check which variables are in the descriptions but not the data frame\nsetdiff(var_desc$variable, names(aps_rep))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ar_user\"               \"ar_institution\"        \"ar_clinician_bcm\"     \n [4] \"ar_clinician_bcm_oth\"  \"ar_clinician_jh\"       \"ar_clinician_jh_oth\"  \n [7] \"ar_clinician_ucsf\"     \"ar_clinician_ucsf_oth\" \"ar_clinician_uab\"     \n[10] \"ar_clinician_uab_oth\"  \"ar_clinician_utsw\"     \"ar_clinician_utsw_oth\"\n[13] \"ar_clinician_lbj\"      \"ar_clinician_lbj_oth\"  \"ar_clinician_utp\"     \n[16] \"ar_clinician_utp_oth\"  \"ar_aps_report_meth\"    \"ar_sex\"               \n[19] \"ar_visit_reason\"      \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove variables in the descriptions but not the data frame\nvar_desc <- var_desc %>% filter(variable %in% names(aps_rep))\n```\n:::\n\n\n\n# Save data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create new aps_reports data folder\nfolder_path <- here::here(\"data\", \"aps_reports\")\nif(!dir.exists(folder_path)) {dir.create(folder_path)}\n\nwrite_rds(aps_rep, here::here(\"data\", \"aps_reports\",\n                                 \"aps_reports_cleaned.RDS\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(var_desc, here::here(\"data_management\", \"aps_reports\", \n                               \"variable_descriptions.RDS\"))\n```\n:::\n",
    "supporting": [
      "data_01_aps_reports_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}