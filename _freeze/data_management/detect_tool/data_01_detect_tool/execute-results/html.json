{
  "hash": "82a8a719edf34dbec84e1d0f752e4cd4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Clean DETECT tool data accessed using REDCap API\"\n---\n\n\n# Overview\n\nIn this file, we do some initial cleaning of the DETECT tool study data accessed from REDCap using API to prepare it for dashboard summary. \n\n# Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dplyr' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'readr' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'purrr' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'stringr' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'here' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'readxl' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'lubridate' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(redcapAPI)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'redcapAPI' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(keyring)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'keyring' was built under R version 4.3.2\n```\n\n\n:::\n:::\n\n\n\n# Load custom functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"R\", \"recoding_factoring_relocating.R\"))\nsource(here::here(\"R\", \"nums_to_na.R\"))\nsource(here::here(\"R\", \"data_cleaning_tools.R\"))\n```\n:::\n\n\n\n# Load data\n\nAn API token unique to each user and project can be requested on REDCap. This API token can be saved on your system using the keyring `key_set` function as follows:\nkeyring::key_set(\"detect_tool_redcap_api\"). A password box will pop-up and your unique token can be entered into the text box. Once this is done once, it doesn't need to be repeated unless a new token is requested on REDCap. The code below can then be run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define REDCap API URL and API token\napi_token <-  keyring::key_get(\"detect_tool_redcap_api\") # Get saved REDCap API token\nredcap_url <- \"https://redcap.uth.tmc.edu/api/\"\n\n# Establish connection to the REDCap project\nrcon <- redcapConnection(url = redcap_url, token = api_token)\n\n# Export records with coded values\ntool_raw  <- exportRecordsTyped(rcon, form = \"reporting_instrument\",\n                                rawOrLabel = \"raw\", factor = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in .castRecords_attachInvalid(rcon = rcon, Records = Records, Raw =\nRaw, : Some records failed validation. Use `reviewInvalidRecords` to review the\nfailures.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Link data\ndefinitions_link_hits <- readxl::read_xlsx(\n  here::here(\"data\", \"detect_tool\", \"link_data\", \n             \"hits_for_elder_abuse_definitions.xlsx\"), \n  col_names = c(\"date\", \"elder_abuse_definitions\"), skip = 1,\n  )\n\nal_link_hits <- readxl::read_xlsx(\n  here::here(\"data\", \"detect_tool\", \"link_data\", \n             \"hits_for_detect_al.xlsx\"), skip = 1,\n  col_names = c(\"date\", \"detect_al\")\n  )\n\nca_link_hits <- readxl::read_xlsx(\n  here::here(\"data\", \"detect_tool\", \"link_data\", \n             \"hits_for_detect_ca.xlsx\"), skip = 1,\n  col_names = c(\"date\", \"detect_ca\")\n  )\n\nmd_link_hits <- readxl::read_xlsx(\n  here::here(\"data\", \"detect_tool\", \"link_data\", \n             \"hits_for_detect_md.xlsx\"), skip = 1,\n  col_names = c(\"date\", \"detect_md\")\n  )\n\ntx_link_hits <- readxl::read_xlsx(\n  here::here(\"data\", \"detect_tool\", \"link_data\", \n             \"hits_for_detect_tx.xlsx\"), skip = 1, \n  col_names = c(\"date\", \"detect_tx\")\n  )\n```\n:::\n\n\n\n# Column name cleaning\n\nHere we will convert all variable names to snake case with double underscores \nreduced to single underscores so that everything is uniform.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntool_raw <- clean_names(tool_raw) %>% \n  rename(ri_clinician_id = ri_clinician_id_2)\n```\n:::\n\n\n\n# Create a dataframe with variable descriptions\n\nExtract the column names from the data and labels data frames to create a data frame of variable descriptions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create list of shortened variable labels based on the descriptions/ original questions\nlabels <- c(\"Record ID\", \"Survey Identifier\", \"Survey Timestamp\", \n           \"Form start timestamp\", \"Form date\", \"Enter survey password\", \n           \"Password verification\", \"Password verification\", \"Patient MRN\", \n           \"Institution\", \"Institution\", \"Institution\", \"Baylor clinician name\", \n           \"Other Baylor clinician name\", \"Johns Hopkins clinician name\", \n           \"Other Johns Hopkins clinician name\", \"UCSF clinician name\",\n           \"Other UCSF clinician name\", \"UAB clinician name\", \n           \"Other UAB clinician name\", \"UTSW clinician name\", \n           \"Other UTSW clinician name\", \"LBJ clinician name\", \n           \"Other LBJ clinician name\", \"UTP clinician name\", \n           \"Other UTP clinician name\", \"Clinician ID\", \"Clinician name\", \n           \"Absence of necessities\", \"Environment health or safety concern\", \n           \"Environment not assessed reason\", \"Defensive\", \n           \"Caregiver not assessed reason\", \"Other reason caregiver not assessed\",\n           \"Chemically sedated\", \"Isolated\", \"Anxious\", \"Prohibited\", \"Unmet needs\", \n           \"Unexplained injuries\", \"Patient not assessed reason\", \n           \"Suspect EM\", \"Indicators observed but EM not suspected reason\", \n           \"Suspect EM reason\", \"Self-neglect suspected\", \n           \"Financial exploitation suspected\", \n           \"Emotional or psychological abuse suspected\", \n           \"Physical abuse suspected\", \"Sexual abuse suspected\", \n           \"Caregiver neglect suspected\", \"Abandonment suspected\", \n           \"Other mistreatment type suspected\", \n           \"Dont know/ Not sure of mistreatment type\", \n           \"Specific other mistreatment type suspected\", \n           \"Intend to report to APS\", \"No intention to report to APS reason\", \n           \"Other service referral\", \"Specify other service\", \n           \"Have helpful details\", \"Brief note\", \"Complete\"\n)\n\n# Add missing variable labels for REDCap variables lost with API\nattributes(tool_raw$redcap_survey_identifier)$label <- \"Survey Identifier\"\nattributes(tool_raw$reporting_instrument_timestamp)$label <- \"Survey Timestamp\"\nattributes(tool_raw$reporting_instrument_complete)$label <-\" Complete?\"\n\n# Combine the variable names, descriptions and labels into a dataframe\nvars_labels <- sapply(tool_raw,\n       function(x){attr(x,\"label\")})\n\nvar_desc <- data.frame(variable = names(vars_labels), description = unname(vars_labels), \n                       label = labels, row.names = NULL) %>%\n  mutate(id = row_number())\n```\n:::\n\n\n\n# Create new variables\n\n## Replace reporting instument timestamp variable with timestamp end variable\n\nThe `reporting_instrument_timestamp` variable contains information on both the submission time and the completion status of each survey response. The variable `reporting_instrument_complete` also provides completion status information. A new variable will be created that only contains the sumbmission time and the reporting_instrument_timestamp variable will be removed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntool <- tool_raw %>% \n  mutate(\n    timestamp_end = case_when(\n      is.na(reporting_instrument_timestamp) ~ NA,\n      reporting_instrument_timestamp == \"[not completed]\" ~ NA,\n      TRUE ~ reporting_instrument_timestamp\n    ),\n    timestamp_end = as.POSIXct(timestamp_end, tz = \"UTC\")\n  ) %>% relocate(c(timestamp_end, reporting_instrument_complete),\n                 .after = ri_timestamp_start) %>%\n  select(-c(reporting_instrument_timestamp))\n```\n:::\n\n\n## Clinician names\n\nCombine clinician names across all institutions into a single column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclinician_names <- c(\"ri_clinician_bcm\", \"ri_clinician_bcm_oth\", \n                     \"ri_clinician_jh\", \"ri_clinician_jh_oth\", \n                     \"ri_clinician_ucsf\", \"ri_clinician_ucsf_oth\", \n                     \"ri_clinician_uab\", \"ri_clinician_uab_oth\", \n                     \"ri_clinician_utsw\", \"ri_clinician_utsw_oth\", \n                     \"ri_clinician_lbj\", \"ri_clinician_lbj_oth\", \n                     \"ri_clinician_utp\", \"ri_clinician_utp_oth\")\n\ntool <- tool %>% \n  mutate(\n    ri_clinician_id_name = coalesce(ri_clinician_utp_oth, ri_clinician_utp, \n                                     ri_clinician_lbj_oth, ri_clinician_lbj, \n                                     ri_clinician_utsw_oth, ri_clinician_utsw, \n                                     ri_clinician_uab_oth, ri_clinician_uab, \n                                     ri_clinician_ucsf_oth, ri_clinician_ucsf, \n                                     ri_clinician_jh_oth, ri_clinician_jh, \n                                     ri_clinician_bcm_oth, ri_clinician_bcm)\n    ) %>% select(-c(all_of(clinician_names))) %>%\n  relocate(ri_clinician_id_name, .after = ri_clinician_id)\n```\n:::\n\n\n## Numeric and factor variables\n\n### Convert all factor variables to character variables\n\nBefore the appropriate factor variables with the appropriate levels can be set, the ones automatically created need to be removed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntool <- tool %>%\n  mutate(\n    across(\n      .cols = where(is.factor),\n      .fns = ~ as.character(.x)\n    )\n  )\n```\n:::\n\n\n### Institution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ri_institution\", \"ri_institution_2\")\nget_values(tool, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Baylor College of Medicine - BT House Calls\"\n[2] \"Johns Hopkins - JHOME\"                      \n[3] \"University of Alabama - UAB House Calls\"    \n[4] \"UT Southwestern - COVE\"                     \n[5] \"UTH Houston - LBJ House Calls\"              \n[6] \"UTH Houston - UT Physicians House Calls\"    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Baylor College of Medicine - BT House Calls\" = 1, \n    \"Johns Hopkins - JHOME\" = 2, \n    \"UCSF - Care at Home Program\" = 3,\n    \"University of Alabama - UAB House Calls\" = 4, \n    \"UT Southwestern - COVE\" = 5, \n    \"UTH Houston - LBJ House Calls\" = 6,\n    \"UTH Houston - UT Physicians House Calls\" = 7\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool <- tool |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntool <- tool %>%\n  rename(calc_institution_7cat = calc_institution) %>%\n  mutate(\n    calc_institution_7cat_f = factor(\n      calc_institution_7cat, levels = as.numeric(value_labels),\n      labels = names(value_labels)\n    )\n  ) %>% relocate(calc_institution_7cat_f, .after = calc_institution_7cat)\n```\n:::\n\n\n### Screening items\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ri_necessities\", \"ri_environment\", \"ri_caregiver\", \"ri_sedated\", \n          \"ri_isolated\", \"ri_anxious\", \"ri_prohibited\", \"ri_unmet_needs\", \n          \"ri_injuries\")\n\nget_values(tool, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No\"               \"Unable to assess\" \"Yes\"             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Yes\" = 1,\n    \"No\" = 0,\n    \"Unable to assess\" = 99\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"3cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool <- tool |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### ri_caregiver_un_reason\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"ri_caregiver_un_reason\")\n\nget_values(tool, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Caregiver not present\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Caregiver not present\" = 1,\n    \"Other reason\" = 98\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool <- tool |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### Yes or No\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"suspect_em\", \"ri_report\", \"ri_refer_svcs\", \"ri_reflection\")\n\nget_values(tool, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No\"  \"Yes\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Yes\" = 1,\n    \"No\" = 0\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool <- tool |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n### EM type\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- paste0(\"ri_em_type_\", c(1:7, 98, 99))\n\n### Change factor labels from \"checked\" and \"unchecked\" to \"Yes\" and \"No\"\ntool <- tool %>% \n  mutate(\n    across(\n      .cols = all_of(cols),\n      .fns = ~ case_when(\n        .x == \"Checked\" ~ \"Yes\",\n        .x == \"Unchecked\" ~ \"No\"\n      )\n    )\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_values(tool, cols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No\"  \"Yes\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric coding for character values in each column of interest\nvalue_labels <- c(\n    \"Yes\" = 1,\n    \"No\" = 0\n)\n\n# NA values\nna_values <- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix <- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs <- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix <- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool <- tool |>\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |> \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |> \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |> \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |> \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |>\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n```\n:::\n\n\n\n# Remove variables without important research data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntool <- tool %>% \n  select(-c(redcap_survey_identifier, password_entry, password_incorrect_1, \n            ri_clinician_name))\n```\n:::\n\n\n\n# Update variable descriptions dataframe with new variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntool_vars <- names(tool) %>% \n  # Subset new variables\n  setdiff(., var_desc$variable) %>%\n  list() %>%\n  # Convert list of new variables into dataframe\n  as.data.frame(col.names = \"variable\") %>%\n  # Join descriptions from var_desc dataframe to new data frame \n  mutate(\n    no_suffix = gsub(\"_[0-9]+cat[_f]*\", \"\", x = variable)\n  ) %>% inner_join(var_desc, by = c(\"no_suffix\" = \"variable\")) %>%\n  # remove \"no_suffix\" variable\n  select(-c(no_suffix))\n\nvar_desc <- bind_rows(var_desc, tool_vars) %>% \n  add_row(variable = \"timestamp_end\", description = \"Form end timestamp\",\n          label = \"Form start timestamp\", id = 62) %>% arrange(id) %>% \n  add_row(variable = \"ri_clinician_id_name\", description = \"Clinician name\",\n          label = \"Clinician name\", id = 28) %>% arrange(id) %>%\n  select(-c(id))\n```\n:::\n\n\n\n# Merge link data and convert to long format\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge all the link data into one data frame\nlink_hits <- list(definitions_link_hits, al_link_hits, ca_link_hits, \n                  md_link_hits, tx_link_hits) %>% purrr::reduce(left_join, \n                                                                by = \"date\") %>%\n  # Convert data frame to long form\n  tidyr::pivot_longer(!date, names_to = \"link\", values_to = \"hits\") %>%\n  mutate(\n    date = lubridate::mdy(date)\n  )\n```\n:::\n\n\n\n# Save data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create new detect_tool data folder\nfolder_path <- here::here(\"data\", \"detect_tool\")\nif(!dir.exists(folder_path)) {dir.create(folder_path)}\n\n# Save cleaned data\nwrite_rds(tool, here::here(\"data\", \"detect_tool\",\n                                 \"detect_tool_cleaned.RDS\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save variable descriptions\nwrite_rds(var_desc, here::here(\"data_management\", \"detect_tool\", \n                               \"variable_descriptions.RDS\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(link_hits, here::here(\"data\", \"detect_tool\",\n                               \"detect_tool_link_hits.RDS\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}