[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R33 Phase Cluster-Randomized Controlled Trial",
    "section": "",
    "text": "Our primary objective is to evaluate whether the use of the DETECT-RPC screening tool increases the average reporting of EM by HBPC clinicians relative to a baseline period where they did not use the DETECT-RPC screening tool.\nThere are two protocols for this phase:\n\nUniversal EM Screening (RCT)\nCaregiver Dyad Follow-Up Interviews\n\n\n\nIn this phase of the study (year 3-5), we will randomize approximately 43 home-based primary care clinicians to either use the adapted DETECT screening tool at every qualified home based primary care patient encounter (experimental condition) or continue to provide standard care (control condition). Providers randomized to the experimental condition will use the adapted DETECT tool at every qualified patient encounter. A waiver of informed consent is approved, as it requires no direct input from the patient; rather, it is a purely observation-based tool, which is completed by the clinician. Over the three years of follow-up, we expect our partner home-based primary care programs to treat approximately 6,150 older adults. Through the randomization process, we expect half of that number to be screened by a clinician using the adapted DETECT tool.\n\n\n\nIn this phase, we will recruit a purposive sample of 180 caregiving dyads consisting of family caregivers and their care recipients, half of which will be living with Alzheimer’s Disease or Related Dementias (ADRD). The study is recruiting dyads because we are interested in caregiver behaviors and their relationship to care recipient outcomes. The caregiving dyads will be recruited from among patients who are actively enrolled in one of our site-specific home-based primary care programs.\n\n\n\n\n\nRigorously evaluate the impact of DETECT-RPC on clinician identification and reporting of older adults with increased risk of EM to the appropriate authorities (RFA key question KQ3).\nRigorously evaluate the effect of DETECT-RPC on targeted mechanisms of action (i.e., current barriers to identification and reporting) elucidated in the R61 phase of the study (mixed-methods).\nRigorously evaluate the benefits (i.e., reduce exposure to abuse and neglect, reduced physical or mental morbidity, and reduced mortality) and harms of screening with DETECT-RPC (RFA key questions KQ1 and KQ4) (mixed-methods).\n\n\n\n\n\nReport on the progress towards recruiting goals.\nReport the fidelity of DETECT-RPC use at each of the study sites\nReport on adverse events and clinical trial stopping criteria."
  },
  {
    "objectID": "index.html#objectives",
    "href": "index.html#objectives",
    "title": "R33 Phase Cluster-Randomized Controlled Trial",
    "section": "",
    "text": "Our primary objective is to evaluate whether the use of the DETECT-RPC screening tool increases the average reporting of EM by HBPC clinicians relative to a baseline period where they did not use the DETECT-RPC screening tool.\nThere are two protocols for this phase:\n\nUniversal EM Screening (RCT)\nCaregiver Dyad Follow-Up Interviews\n\n\n\nIn this phase of the study (year 3-5), we will randomize approximately 43 home-based primary care clinicians to either use the adapted DETECT screening tool at every qualified home based primary care patient encounter (experimental condition) or continue to provide standard care (control condition). Providers randomized to the experimental condition will use the adapted DETECT tool at every qualified patient encounter. A waiver of informed consent is approved, as it requires no direct input from the patient; rather, it is a purely observation-based tool, which is completed by the clinician. Over the three years of follow-up, we expect our partner home-based primary care programs to treat approximately 6,150 older adults. Through the randomization process, we expect half of that number to be screened by a clinician using the adapted DETECT tool.\n\n\n\nIn this phase, we will recruit a purposive sample of 180 caregiving dyads consisting of family caregivers and their care recipients, half of which will be living with Alzheimer’s Disease or Related Dementias (ADRD). The study is recruiting dyads because we are interested in caregiver behaviors and their relationship to care recipient outcomes. The caregiving dyads will be recruited from among patients who are actively enrolled in one of our site-specific home-based primary care programs."
  },
  {
    "objectID": "index.html#r33-specific-aims",
    "href": "index.html#r33-specific-aims",
    "title": "R33 Phase Cluster-Randomized Controlled Trial",
    "section": "",
    "text": "Rigorously evaluate the impact of DETECT-RPC on clinician identification and reporting of older adults with increased risk of EM to the appropriate authorities (RFA key question KQ3).\nRigorously evaluate the effect of DETECT-RPC on targeted mechanisms of action (i.e., current barriers to identification and reporting) elucidated in the R61 phase of the study (mixed-methods).\nRigorously evaluate the benefits (i.e., reduce exposure to abuse and neglect, reduced physical or mental morbidity, and reduced mortality) and harms of screening with DETECT-RPC (RFA key questions KQ1 and KQ4) (mixed-methods)."
  },
  {
    "objectID": "index.html#r33-annual-milestones",
    "href": "index.html#r33-annual-milestones",
    "title": "R33 Phase Cluster-Randomized Controlled Trial",
    "section": "",
    "text": "Report on the progress towards recruiting goals.\nReport the fidelity of DETECT-RPC use at each of the study sites\nReport on adverse events and clinical trial stopping criteria."
  },
  {
    "objectID": "data_management/mock_data/02_clinician_tracker_data_analysis.html",
    "href": "data_management/mock_data/02_clinician_tracker_data_analysis.html",
    "title": "Load Packages",
    "section": "",
    "text": "Load Packages\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(here)\n\nWarning: package 'here' was built under R version 4.3.3\n\n\nhere() starts at C:/Users/ebiek/OneDrive - UTHealth Houston/Cannell lab/r33_dashboards\n\nlibrary(ids)\n\nWarning: package 'ids' was built under R version 4.3.3\n\nlibrary(lubridate, include.only = c(\"year\", \"month\", \"day\"))\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n\n# Load function for converting POSIXct dates to a Month YYYY format.\nsource(here::here(\"r\", \"month_name_year.R\"))\n\n\n\nLoad data\n\nraw_data &lt;- readRDS(here::here(\"data\", \"clinician_tracker_mock_data_raw.rds\"))\n\n\n\nAdd calculated values to raw clinician tracker data\n\ndata_com &lt;- raw_data %&gt;%\n  mutate(\n    num_completed = case_when(\n      screened == 1 ~ sample(c(sample(c(0:12), 902, replace = TRUE), rep(12, (13158-902)))),\n      TRUE          ~ NA\n      ),\n    perc_completed = (num_completed/12)*100\n  )\n\n\n# Create date column with Month YYYY format.\nclin_data &lt;- month_year(data_com, visit_date, \"month_year\") %&gt;%\n  # Calculate proportion screened and proportion of screening questions answered \n  # each month for each clinic \n  group_by(month_year, clinic_name) %&gt;%\n  mutate(\n    perc_screened_month_clinic = format(round((sum(screened, na.rm=TRUE)/sum(eligible, na.rm=TRUE))*100, digits = 2),nsmall=2),\n    perc_items_month_clinic = format(round(mean(perc_completed, na.rm=TRUE), digits = 2),nsmall=2)\n  ) %&gt;%\n  ungroup() %&gt;%\n  group_by(month_year, name_full_phys) %&gt;%\n  # Calculate proportion screened and proportion of screening questions answered \n  # each month for each physician\n  mutate(\n    perc_screened_month_phys = format(round((sum(screened, na.rm=TRUE)/sum(eligible, na.rm=TRUE))*100, digits = 2),nsmall=2),\n    perc_items_month_phys = format(round(mean(perc_completed, na.rm=TRUE), digits = 2),nsmall=2)\n    ) %&gt;%\n  ungroup() %&gt;%\n  # Convert NaN to NA\n  mutate(\n    across(\n      .cols = c(starts_with(\"perc_items\"), starts_with(\"perc_screened\")),\n      .fns = ~ case_when(\n        .x == NaN ~ NA,\n        TRUE      ~ .x\n      )\n    )\n  )\n\n\n\nSave data\n\n# Save clinician tracking data\nsaveRDS(clin_data, here::here(\"data\", \"clinician_tracker_mock_data_calc.rds\"))"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "",
    "text": "In this file, we create some new variables that summarize the completion and missingness counts for various variables in the DETECT tool pilot study data. These new variables will used in creating interactive plots using the plotly package."
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#create-fuction-to-generate-missingness-variables",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#create-fuction-to-generate-missingness-variables",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Create fuction to generate missingness variables",
    "text": "Create fuction to generate missingness variables\nThis function will also take branching/ skip logic into consideration.\n\ndt_miss &lt;- function(df, var, condition = NULL){\n  if(is.null(condition)){\n    new_df &lt;- df %&gt;% \n      mutate(\n        \"{var}_miss\" := case_when(\n          is.na(.data[[var]]) ~ 1,\n          TRUE ~ 0\n        )\n      )\n  }else if(!is.null(condition)){\n    new_df &lt;- df %&gt;%\n      mutate(\n         \"{var}_miss\" := case_when(\n           eval(parse(text = condition)) & is.na(.data[[var]]) ~ 1,\n           !(eval(parse(text = condition))) & is.na(.data[[var]]) ~ NA,\n           eval(parse(text = condition)) & !is.na(.data[[var]]) ~ 0\n        )       \n      )\n  }\n  \n  new_df %&gt;% relocate(paste0(var, \"_miss\"), .after = var)\n}"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#variables-with-no-conditional-arguments-skip-logic",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#variables-with-no-conditional-arguments-skip-logic",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Variables with no conditional arguments/ skip logic",
    "text": "Variables with no conditional arguments/ skip logic\n\nvars &lt;- c(\"ri_patient_mrn\", \"calc_institution_7cat_f\", \"ri_clinician_id_name\", \n          \"ri_necessities_3cat_f\", \"ri_environment_3cat_f\", \n          \"ri_caregiver_3cat_f\", \"ri_sedated_3cat_f\", \"ri_isolated_3cat_f\", \n          \"ri_anxious_3cat_f\", \"ri_prohibited_3cat_f\", \"ri_unmet_needs_3cat_f\", \n          \"ri_injuries_3cat_f\", \"suspect_em_2cat_f\", \"ri_reflection_2cat_f\"\n          )\ncondition &lt;- NULL\n\n\nfor(var in vars){\n  missing_data &lt;- dt_miss(df = missing_data, var = var, \n                     condition = condition)  \n}\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(var)\n\n  # Now:\n  data %&gt;% select(all_of(var))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;."
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#variables-with-conditional-arguments-skip-logic",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#variables-with-conditional-arguments-skip-logic",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Variables with conditional arguments/ skip logic",
    "text": "Variables with conditional arguments/ skip logic\n\nri_environment_un_reason\n\nvar &lt;- \"ri_environment_un_reason\"\n\ncondition_vars &lt;- c(\"ri_necessities_3cat_f\", \"ri_environment_3cat_f\")\n\ncondition &lt;- \"if_any(.cols = all_of(condition_vars), .fns = ~.x == 'Unable to assess')\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_caregiver_un_reason\n\nvar &lt;- \"ri_caregiver_un_reason_2cat_f\"\ncondition &lt;- \"ri_caregiver_3cat_f == 'Unable to assess'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition) \n\n\n\nri_caregiver_oth\n\nvar &lt;- \"ri_caregiver_oth\"\ncondition &lt;- \"ri_caregiver_un_reason_2cat_f == 'Other reason'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_patient_assess\n\nvar &lt;- \"ri_patient_assess\"\n\ncondition_vars &lt;- c(\"ri_sedated_3cat_f\", \"ri_isolated_3cat_f\",\n                    \"ri_anxious_3cat_f\", \"ri_prohibited_3cat_f\", \n                    \"ri_unmet_needs_3cat_f\", \"ri_injuries_3cat_f\")\n\ncondition &lt;- \"if_any(.cols = all_of(condition_vars), .fns = ~.x == 'Unable to assess')\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_em_no_reason\n\nvar &lt;- \"ri_em_no_reason\"\n\ncondition_vars &lt;- c(\"ri_necessities_3cat_f\", \"ri_environment_3cat_f\",\n                    \"ri_caregiver_3cat_f\", \"ri_sedated_3cat_f\", \n                    \"ri_isolated_3cat_f\", \"ri_anxious_3cat_f\", \n                    \"ri_prohibited_3cat_f\", \"ri_unmet_needs_3cat_f\", \n                    \"ri_injuries_3cat_f\")\n\ncondition &lt;- \"suspect_em_2cat_f == 'No' & if_any(.cols = all_of(condition_vars), \n.fns = ~.x == 'Yes')\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_em_reason\n\nvar &lt;- \"ri_em_reason\"\n\ncondition_vars &lt;- c(\"ri_necessities_3cat_f\", \"ri_environment_3cat_f\",\n                    \"ri_caregiver_3cat_f\", \"ri_sedated_3cat_f\", \n                    \"ri_isolated_3cat_f\", \"ri_anxious_3cat_f\", \n                    \"ri_prohibited_3cat_f\", \"ri_unmet_needs_3cat_f\", \n                    \"ri_injuries_3cat_f\")\n\ncondition &lt;- \"suspect_em_2cat_f == 'Yes' & if_all(.cols = all_of(condition_vars), \n.fns = ~.x != 'Yes')\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nEM Type vars\n\nem_type_vars &lt;- c(\"ri_em_type_1_2cat_f\", \"ri_em_type_2_2cat_f\", \"ri_em_type_3_2cat_f\", \n          \"ri_em_type_4_2cat_f\", \"ri_em_type_5_2cat_f\", \"ri_em_type_6_2cat_f\", \n          \"ri_em_type_7_2cat_f\", \"ri_em_type_98_2cat_f\", \"ri_em_type_99_2cat_f\")\n\n\nmissing_data &lt;- missing_data %&gt;%\n  mutate(\n    ri_em_type_miss = case_when(\n      suspect_em_2cat_f == 'Yes' & \n        if_all(.cols = all_of(em_type_vars), \n               .fns = ~.x == \"No\") ~ 1,\n      suspect_em_2cat_f != 'Yes' & \n        if_all(.cols = all_of(em_type_vars), \n               .fns = ~.x == \"No\") ~ NA,\n      suspect_em_2cat_f == 'Yes' & \n        if_any(.cols = all_of(em_type_vars), \n               .fns = ~.x == \"Yes\") ~ 0      \n      )\n  )\n\n\n\nri_em_type_other\n\nvar &lt;- \"ri_em_type_other\"\ncondition &lt;- \"ri_em_type_98_2cat_f == 'Checked'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_report_2cat_f\n\nvar &lt;- \"ri_report_2cat_f\"\ncondition &lt;- \"suspect_em_2cat_f == 'Yes'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_aps_no_reason\n\nvar &lt;- \"ri_aps_no_reason\"\ncondition &lt;- \"ri_report_2cat_f == 'No'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_refer_svcs_2cat_f\n\nvar &lt;- \"ri_refer_svcs_2cat_f\"\ncondition &lt;- \"suspect_em_2cat_f == 'Yes'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)\n\n\n\nri_refer_svcs_specify\n\nvar &lt;- \"ri_refer_svcs_specify\"\ncondition &lt;- \"ri_refer_svcs_2cat_f == 'Yes'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition) \n\n\n\nri_reflection_notes\n\nvar &lt;- \"ri_reflection_notes\"\ncondition &lt;- \"ri_reflection_2cat_f == 'Yes'\"\n\n\nmissing_data &lt;- dt_miss(df = missing_data, var = var, \n                   condition = condition)"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#all",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#all",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "All",
    "text": "All\n\nmissing_plot_data &lt;- create_missing_plot_data(missing_data)"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#baylor",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#baylor",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Baylor",
    "text": "Baylor\n\nbaylor_missing_plot_data &lt;-  missing_data %&gt;% \n  filter(calc_institution_7cat_f == \"Baylor College of Medicine - BT House Calls\") %&gt;%\n  create_missing_plot_data()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#johns-hopkins",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#johns-hopkins",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Johns Hopkins",
    "text": "Johns Hopkins\n\njh_missing_plot_data &lt;-  missing_data %&gt;% \n  filter(calc_institution_7cat_f == \"Johns Hopkins - JHOME\") %&gt;%\n  create_missing_plot_data()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#ucsf",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#ucsf",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "UCSF",
    "text": "UCSF\n\nucsf_missing_plot_data &lt;-  missing_data %&gt;% \n  filter(calc_institution_7cat_f == \"UCSF - Care at Home Program\") %&gt;%\n  create_missing_plot_data()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#uab",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#uab",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "UAB",
    "text": "UAB\n\nuab_missing_plot_data &lt;-  missing_data %&gt;% \n  filter(calc_institution_7cat_f == \"University of Alabama - UAB House Calls\") %&gt;%\n  create_missing_plot_data()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#utsw",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#utsw",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "UTSW",
    "text": "UTSW\n\nutsw_missing_plot_data &lt;-  missing_data %&gt;% \n  filter(calc_institution_7cat_f == \"UT Southwestern - COVE\") %&gt;%\n  create_missing_plot_data()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#lbj",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#lbj",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "LBJ",
    "text": "LBJ\n\nlbj_missing_plot_data &lt;-  missing_data %&gt;% \n  filter(calc_institution_7cat_f == \"UTH Houston - LBJ House Calls\") %&gt;%\n  create_missing_plot_data()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#utp",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#utp",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "UTP",
    "text": "UTP\n\nutp_missing_plot_data &lt;-  missing_data %&gt;% \n  filter(calc_institution_7cat_f == \"UTH Houston - UT Physicians House Calls\") %&gt;%\n  create_missing_plot_data()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#indicators-of-abuse",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#indicators-of-abuse",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Indicators of abuse",
    "text": "Indicators of abuse\n\nind_em_labs &lt;- c(\n  \"Absence of necessities\", \"Environment health or safety concern\", \"Defensive\", \n  \"Chemically sedated\", \"Isolated\", \"Anxious\", \"Prohibited\", \"Unmet needs\",\n  \"Unexplained injuries\" \n  )\n\n\nind_em_plot_data &lt;- univar_plot_data(ind_em_vars, \n                                        level_list = c(\"Yes\", \"No\", \n                                                       \"Unable to assess\"),\n                                     labels_list = ind_em_labs)\n\n\n# Overall data not grouped by institution\nind_em_plot_data_all &lt;- ind_em_plot_data %&gt;% select(-c(calc_institution_7cat_f, inst_count,\n                                            inst_perc, inst_total)) %&gt;% \n  distinct()"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#em-type",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#em-type",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "EM Type",
    "text": "EM Type\n\nem_type_labs &lt;- c(\n  \"Self-neglect suspected\", \"Financial exploitation suspected\", \n  \"Emotional or psychological abuse suspected\", \"Physical abuse suspected\", \n  \"Sexual abuse suspected\", \"Caregiver neglect suspected\", \n  \"Abandonment suspected\", \"Other mistreatment type suspected\",\n  \"Dont know/ Not sure of mistreatment type\"\n  )\n\n\nem_type_plot_data &lt;- univar_plot_data(em_type_vars, \n                                        level_list = c(\"Yes\", \"No\"),\n                                      labels_list = em_type_labs)\n\n\n# Overall data not grouped by institution\nem_type_plot_data_all &lt;- em_type_plot_data %&gt;% select(-c(calc_institution_7cat_f, inst_count,\n                                            inst_perc, inst_total)) %&gt;% \n  distinct()\n\n\nCounts for APS reports intended and made\n\n# Intended reports\nreports_intended &lt;- dt_data %&gt;% select(ri_patient_mrn, calc_institution_7cat_f, \n                                          ri_report_2cat_f, timestamp_end) %&gt;% \n  # Exclude fake patient\n  filter(ri_patient_mrn != \"Julia_Test_Patient1\") %&gt;%\n  # Filter only rows where an intention to report was indicated\n  filter(ri_report_2cat_f == \"Yes\") %&gt;%\n  # Standardize the MRN to remove trailing zeros at the beginning\n  mutate(\n    std_mrn = gsub(\"^0+\", \"\", ri_patient_mrn),\n    # ri_date does not always match the timestamp variable so make a new date \n    # variable based on the ending timestamp\n    end_date = as.Date(timestamp_end)\n  ) %&gt;% relocate(std_mrn, .after = ri_patient_mrn) \n\n# Date range\nstart_date &lt;- min(as.Date(dt_data$ri_timestamp_start))\nend_date &lt;- max(as.Date(dt_data$timestamp_end))\n\n# Reports made\nintended_reports_made &lt;- aps_reports_data %&gt;% \n  select(ar_mrn, ar_encounter_date) %&gt;%\n  filter(between(as.Date(ar_encounter_date), start_date, end_date)) %&gt;% \n  # Standardize the MRN to remove trailing zeros at the beginning\n  mutate(\n    std_mrn = gsub(\"^0+\", \"\", ar_mrn)\n  ) %&gt;% relocate(std_mrn, .after = ar_mrn) %&gt;%\n  right_join(reports_intended, \n             by = c(\"ar_encounter_date\" = \"end_date\", \"std_mrn\"))"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#indicators-of-em-module-and-suspect-em",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#indicators-of-em-module-and-suspect-em",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Indicators of EM Module and Suspect EM",
    "text": "Indicators of EM Module and Suspect EM\n\nind_sus_em_plot_data &lt;- bivar_plot_data(ind_em_vars, \n                                        level_list = c(\"Yes\", \"No\", \n                                                       \"Unable to assess\"),\n                                        labels_list = ind_em_labs\n)\n\n\n# Overall data for plot not grouped by institution\nind_sus_em_plot_data_all &lt;- ind_sus_em_plot_data %&gt;% \n  select(-c(calc_institution_7cat_f, inst_count, inst_perc, inst_perc_label)\n         ) %&gt;% \n  distinct()\n\n\n# Overall data for table not grouped by institution\nind_sus_em_table_data_all &lt;- ind_sus_em_plot_data_all %&gt;%\n  select(-c(perc)) %&gt;%\n  mutate(\n    label = factor(label, levels = ind_em_labs)\n  ) %&gt;% arrange(label) %&gt;%\n  # Add shade column\n  add_shade_column_x_rows(., 4)\n\n\n# Data for tables grouped by institution\nind_sus_em_table_data &lt;- ind_sus_em_plot_data %&gt;%\n  select(-c(count, perc, perc_label, inst_perc)) %&gt;% \n  # Arrange df by levels of indicators em label variable\n  mutate(\n    label = factor(label, levels = ind_em_labs)\n  ) %&gt;% arrange(label)"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#suspect-em-and-em-type",
    "href": "data_management/detect_tool_pilot/data_02_detect_tool_pilot_test.html#suspect-em-and-em-type",
    "title": "Create variables for visualizing the DETECT tool pilot study data",
    "section": "Suspect EM and EM Type",
    "text": "Suspect EM and EM Type\n\nem_type_labs &lt;- c( \"Self-neglect suspected\", \"Financial exploitation suspected\", \n                   \"Emotional or psychological abuse suspected\", \n                   \"Physical abuse suspected\",  \"Sexual abuse suspected\", \n                   \"Caregiver neglect suspected\", \"Abandonment suspected\", \n                   \"Other mistreatment type suspected\", \n                   \"Dont know/ Not sure of mistreatment type\")\n\n\nsus_type_em_plot_data &lt;- bivar_plot_data(em_type_vars, level_list = c(\"Yes\", \"No\"),\n                                        labels_list = em_type_labs) %&gt;%\n  filter(suspect_em_2cat_f == \"Yes\")\n\n\n# Overall data for plot not grouped by institution\nsus_type_em_plot_data_all &lt;- sus_type_em_plot_data %&gt;% \n  select(-c(calc_institution_7cat_f, inst_count, inst_perc, inst_perc_label)\n         ) %&gt;% \n  distinct()\n\n\n# Overall data for table not grouped by institution\nsus_type_em_table_data_all &lt;- sus_type_em_plot_data_all %&gt;%\n  select(-c(perc)) %&gt;% \n  mutate(\n    label = factor(label, levels = em_type_labs)\n  ) %&gt;% arrange(label) %&gt;%\n  # Add shade column\n  add_shade_column_x_rows(., 3)\n\n\n# Data for tables grouped by institution\nsus_type_em_table_data &lt;- sus_type_em_plot_data %&gt;%\n  select(-c(count, perc, perc_label, inst_perc)) %&gt;%  \n  # Arrange df by levels of indicators em label variable\n  mutate(\n    label = factor(label, levels = em_type_labs)\n  ) %&gt;% arrange(label)"
  },
  {
    "objectID": "data_management/aps_reports/data_01_aps_reports.html",
    "href": "data_management/aps_reports/data_01_aps_reports.html",
    "title": "Clean APS reports data imported from REDCap",
    "section": "",
    "text": "In this file, we do some initial cleaning of the APS reports data imported from REDCap to prepare it for dashboard summary."
  },
  {
    "objectID": "data_management/aps_reports/data_01_aps_reports.html#numeric-and-factor-variables",
    "href": "data_management/aps_reports/data_01_aps_reports.html#numeric-and-factor-variables",
    "title": "Clean APS reports data imported from REDCap",
    "section": "Numeric and factor variables",
    "text": "Numeric and factor variables\n\nPerson submitting\n\ncols &lt;- c(\"ar_user\")\nget_values(aps_rep, cols)\n\n[1] \"Debbie Freeland, MD\"     \"Faith Atai, MD\"         \n[3] \"Julia Hiner, MD\"         \"Kristina Little, MD\"    \n[5] \"Maria Yefimova, PhD, MS\" \"Marianthe Grammas, MD\"  \n[7] \"Not listed\"              \"Thomas Cudjoe, MD, MPH\" \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Kristina Little, MD\" = 11, \"Thomas Cudjoe, MD, MPH\" = 21, \n    \"Maria Yefimova, PhD, MS\" = 31, \"Marianthe Grammas, MD\" = 41, \n    \"Debbie Freeland, MD\" = 51, \"Julia Hiner, MD\" = 61, \"Faith Atai, MD\" = 71,\n    \"Not listed\" = 98\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"8cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nInstitution\n\ncols &lt;- c(\"ar_institution\")\nget_values(aps_rep, cols)\n\n[1] \"Baylor College of Medicine - BT House Calls\"\n[2] \"Johns Hopkins - JHOME\"                      \n[3] \"UCSF - Care at Home Program\"                \n[4] \"University of Alabama - UAB House Calls\"    \n[5] \"UT Southwestern - COVE\"                     \n[6] \"UTH Houston - LBJ House Calls\"              \n[7] \"UTH Houston - UT Physicians House Calls\"    \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Baylor College of Medicine - BT House Calls\" = 1, \n    \"Johns Hopkins - JHOME\" = 2, \n    \"UCSF - Care at Home Program\" = 3,\n    \"University of Alabama - UAB House Calls\" = 4, \n    \"UT Southwestern - COVE\" = 5, \n    \"UTH Houston - LBJ House Calls\" = 6,\n    \"UTH Houston - UT Physicians House Calls\" = 7\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\nnames(aps)\n\n [1] \"form_id\"                  \"redcap_survey_identifier\"\n [3] \"aps_reporting_timestamp\"  \"ar_timestamp_start\"      \n [5] \"ar_date\"                  \"ar_latitude\"             \n [7] \"ar_longitude\"             \"ar_user\"                 \n [9] \"ar_user_oth\"              \"ar_institution\"          \n[11] \"ar_clinician_bcm\"         \"ar_clinician_bcm_oth\"    \n[13] \"ar_clinician_jh\"          \"ar_clinician_jh_oth\"     \n[15] \"ar_clinician_ucsf\"        \"ar_clinician_ucsf_oth\"   \n[17] \"ar_clinician_uab\"         \"ar_clinician_uab_oth\"    \n[19] \"ar_clinician_utsw\"        \"ar_clinician_utsw_oth\"   \n[21] \"ar_clinician_lbj\"         \"ar_clinician_lbj_oth\"    \n[23] \"ar_clinician_utp\"         \"ar_clinician_utp_oth\"    \n[25] \"ar_clinician_id\"          \"ar_aps_report_num\"       \n[27] \"ar_aps_report_date\"       \"ar_aps_report_meth\"      \n[29] \"ar_aps_report_meth_oth\"   \"ar_mrn\"                  \n[31] \"ar_dob\"                   \"ar_sex\"                  \n[33] \"ar_sex_oth\"               \"ar_race_1\"               \n[35] \"ar_race_2\"                \"ar_race_3\"               \n[37] \"ar_race_4\"                \"ar_race_5\"               \n[39] \"ar_race_98\"               \"ar_race_99\"              \n[41] \"ar_race_oth\"              \"ar_hispanic\"             \n[43] \"ar_relationship\"          \"ar_relationship_oth\"     \n[45] \"ar_household_size\"        \"ar_zip\"                  \n[47] \"ar_encounter_date\"        \"ar_enc_aps_date_diff_day\"\n[49] \"ar_visit_reason\"          \"ar_visit_reason_oth\"     \n[51] \"ar_dx_mci_dementia_0\"     \"ar_dx_mci_dementia_1\"    \n[53] \"ar_dx_mci_dementia_2\"     \"ar_dx_mci_dementia_77\"   \n[55] \"ar_functional_status_1\"   \"ar_functional_status_2\"  \n[57] \"ar_functional_status_3\"   \"ar_functional_status_4\"  \n[59] \"ar_functional_status_5\"   \"ar_functional_status_98\" \n[61] \"ar_functional_status_77\"  \"ar_functional_status_oth\"\n[63] \"ar_note\"                  \"aps_reporting_complete\"  \n\n\n\n\nClinicians\nCombine clinician names across all institutions into a single column\n\nclinician_vars &lt;- c(\"ar_clinician_bcm\", \"ar_clinician_bcm_oth\", \n                     \"ar_clinician_jh\", \"ar_clinician_jh_oth\", \n                     \"ar_clinician_ucsf\", \"ar_clinician_ucsf_oth\",\n                     \"ar_clinician_uab\", \"ar_clinician_uab_oth\", \n                     \"ar_clinician_utsw\", \"ar_clinician_utsw_oth\", \n                     \"ar_clinician_lbj\", \"ar_clinician_lbj_oth\", \n                     \"ar_clinician_utp\", \"ar_clinician_utp_oth\")\n\naps_rep &lt;- aps_rep %&gt;% \n  mutate(\n    ar_clinician = coalesce(ar_clinician_utp_oth, ar_clinician_utp, \n                            ar_clinician_lbj_oth, ar_clinician_lbj, \n                            ar_clinician_utsw_oth, ar_clinician_utsw, \n                            ar_clinician_uab_oth, ar_clinician_uab, \n                            ar_clinician_ucsf_oth, ar_clinician_ucsf, \n                            ar_clinician_jh_oth, ar_clinician_jh, \n                            ar_clinician_bcm_oth, ar_clinician_bcm)\n    ) %&gt;% select(-c(all_of(clinician_vars))) %&gt;%\n  relocate(ar_clinician, .after = ar_institution_7cat_f)\n\n\n\nAPS report number\nRemove non-alphanumeric characters like pounds or dashes and non-applicable entries like “NA”, “N/A” e.t.c.\n\naps_rep &lt;-  aps_rep %&gt;%\n  mutate(\n    # Remove non-alphanumeric characters\n    ar_aps_report_num = gsub(\"[^a-zA-Z0-9]\", \"\", ar_aps_report_num),\n    # Remove \"NA\" or \"N/A\"\n    ar_aps_report_num = ifelse(ar_aps_report_num == \"NA\" | \n                                   ar_aps_report_num == \"n/a\", NA, \n                                 ar_aps_report_num)\n  )\n\n\n\nAPS report method\n\ncols &lt;- c(\"ar_aps_report_meth\")\nget_values(aps_rep, cols)\n\n[1] \"Online\"                         \"Other {ar_aps_report_meth_oth}\"\n[3] \"Phone\"                         \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Online\" = 1, \n    \"Phone\" = 2, \n    \"Other {ar_aps_report_meth_oth}\" = 98\n)\n\nnew_value_labels &lt;- c(\n    \"Online\" = 1, \n    \"Phone\" = 2, \n    \"Other\" = 98\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"3cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- new_value_labels[!new_value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nSex\n\ncols &lt;- c(\"ar_sex\")\nget_values(aps_rep, cols)\n\n[1] \"Female\" \"Male\"  \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Male\" = 1, \n    \"Female\" = 2, \n    \"Not listed {ar_sex_oth}\" = 98,\n    \"Unknown\" = 77\n)\n\nnew_value_labels &lt;- c(\n    \"Male\" = 1, \n    \"Female\" = 2, \n    \"Not listed\" = 98,\n    \"Unknown\" = 77\n)\n\n# NA values\nna_values &lt;- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"3cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- new_value_labels[!new_value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nRace\n\nrace_cols &lt;- c(\"ar_race_1\", \"ar_race_2\", \"ar_race_3\", \"ar_race_4\", \"ar_race_5\", \n               \"ar_race_98\")\n\nCreate a new race-ethnicity variable with the following categories: “Hispanic, any race”, “Black, non-Hispanic”, “White, non-Hispanic”, “Other race or multiple races, non-Hispanic”\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n  \"Hispanic, any race\" = 1, \"Black, non-Hispanic\" = 2, \"White, non-Hispanic\" = 3, \n  \"Other race or multiple races, non-Hispanic\" = 4\n)\n\naps_rep &lt;- aps_rep %&gt;%\n  mutate(\n    race_sum = rowSums(across(.cols = all_of(race_cols))), # Temp column for sum\n    ar_race_6cat = case_when(\n      ar_race_1 == 1 & race_sum == 1 ~ 1, # American Indian or Alaskan Native\n      ar_race_2 == 1 & race_sum == 1 ~ 2, # Asian\n      ar_race_3 == 1 & race_sum == 1 ~ 3, # Black or African American\n      ar_race_4 == 1 & race_sum == 1 ~ 4, # Native Hawaiian or Other Pacific Islander\n      ar_race_5 == 1 & race_sum == 1 ~ 5, # White\n      race_sum &gt; 1 ~ 6, # Multiple races\n      ar_race_98 == 1 & (grepl(\"^ *[\\\"\\']*hispanic[\\\"\\']* *$\", ar_race_oth, \n              ignore.case = TRUE) == FALSE) ~ 6, # Other race (not hispanic),\n      TRUE ~ NA\n    ),\n    ar_race_eth_4cat = case_when(\n      is.na(ar_hispanic) ~ NA_integer_,\n      ar_hispanic == \"Yes\" ~ 1, # \"Hispanic, any race\"\n      ar_race_6cat == 3 & ar_hispanic == \"No\" ~ 2, # \"Black, non-Hispanic\"\n      ar_race_6cat == 5 & ar_hispanic == \"No\" ~ 3, # \"White, non-Hispanic\"\n      TRUE ~ 4, # \"Other race or multiple races, non-Hispanic\"\n    ),\n    ar_race_eth_4cat_f = factor(\n      ar_race_eth_4cat,\n      levels = as.numeric(value_labels),\n      labels = names(value_labels)\n    )\n  ) %&gt;% select(-c(race_sum))\n\n# Relocate new ar_race_6cat, ar_race_eth variables after ar_race_race_oth  \ncols &lt;- c(\"ar_race_eth_4cat_f\", \"ar_race_eth_4cat\", \"ar_race_6cat\") \nfor (col in cols) {\n  aps_rep &lt;- aps_rep %&gt;%\n    dplyr::relocate(all_of(col), .after = ar_race_oth )\n}\n\n\n\nHispanic\n\ncols &lt;- c(\"ar_hispanic\")\nget_values(aps_rep, cols)\n\n[1] \"No\"      \"Unknown\" \"Yes\"    \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Yes\" = 1, \n    \"No\" = 0, \n    \"Unknown\" = 77\n)\n\n# NA values\nna_values &lt;- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nRelationship status\n\ncols &lt;- c(\"ar_relationship\")\nget_values(aps_rep, cols)\n\n[1] \"Divorced\"                                             \n[2] \"Living together and unmarried/Common law relationship\"\n[3] \"Married\"                                              \n[4] \"Separated\"                                            \n[5] \"Single/Never married\"                                 \n[6] \"Unknown\"                                              \n[7] \"Widowed\"                                              \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Married\" = 1, \n    \"Living together and unmarried/Common law relationship\" = 2, \n    \"Separated\" = 3,\n    \"Divorced\" = 4,\n    \"Widowed\" = 5,\n    \"Single/Never married\" = 6,\n    \"Not listed {ar_relationship_oth}\" = 98,\n    \"Unknown\" = 77\n)\n\n# Numeric coding for character values in each column of interest\nnew_value_labels &lt;- c(\n    \"Married\" = 1, \n    \"Living together and unmarried/Common law relationship\" = 2, \n    \"Separated\" = 3,\n    \"Divorced\" = 4,\n    \"Widowed\" = 5,\n    \"Single/Never married\" = 6,\n    \"Not listed\" = 98,\n    \"Unknown\" = 77\n)\n\n# NA values\nna_values &lt;- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- new_value_labels[!new_value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nHousehold size\n\ncols &lt;- c(\"ar_household_size\")\nget_values(aps_rep, cols)\n\n[1] \"1\"       \"2\"       \"3\"       \"4\"       \"5\"       \"6\"       \"7\"      \n[8] \"Unknown\"\n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"1\" = 1, \n    \"2\" = 2, \n    \"3\" = 3,\n    \"4\" = 4,\n    \"5\" = 5,\n    \"6\" = 6,\n    \"7\" = 7,\n    \"8\" = 8,\n    \"9+\" = 9,\n    \"Unknown\" = 77\n)\n\n# NA values\nna_values &lt;- c(77)\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"9cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nReason for Visit\n\ncols &lt;- c(\"ar_visit_reason\")\nget_values(aps_rep, cols)\n\n[1] \"New patient for home safety evaluation\"       \n[2] \"New patient for transition of care\"           \n[3] \"New patient to establish care\"                \n[4] \"Not listed\"                                   \n[5] \"Return patient for acute and chronic concerns\"\n[6] \"Return patient for acute concern only\"        \n[7] \"Return patient for chronic concern only\"      \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"New patient to establish care\" = 1, \n    \"New patient for home safety evaluation\" = 2, \n    \"New patient for transition of care\" = 3,\n    \"Return patient for acute concern only\" = 4,\n    \"Return patient for chronic concern only\" = 5,\n    \"Return patient for acute and chronic concerns\" = 6,\n    \"Not listed\" = 98\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\naps_rep &lt;- aps_rep |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nCognitive impairment\n\ncols &lt;- c(\"ar_dx_mci_dementia_0\", \"ar_dx_mci_dementia_1\", \"ar_dx_mci_dementia_2\",  \n          \"ar_dx_mci_dementia_77\")\nget_values(aps_rep, cols)\n\n[1] \"0\" \"1\"\n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels_4cat &lt;- c(\n    \"No diagnosis of mild cognitive impairment or dementia\" = 0, \n    \"Diagnosis of mild cognitive impairment\" = 1, \n    \"Diagnosis of dementia\" = 2,\n    \"Diagnosis of both mild cognitive impairment and dementia\" = 3\n)\n\nvalue_labels_2cat &lt;- c(\n    \"No diagnosis of mild cognitive impairment or dementia\" = 0, \n    \"Diagnosis of mild cognitive impairment or dementia\" = 1\n)\n\naps_rep &lt;- aps_rep %&gt;% \n  mutate(\n    dx_sum = rowSums(across(.cols = all_of(cols))), # Temp column for sum\n    ar_dx_imp_4cat = case_when(\n      ar_dx_mci_dementia_0 == 1 & dx_sum == 1 ~ 0,\n      ar_dx_mci_dementia_1 == 1 & dx_sum == 1 ~ 1,\n      ar_dx_mci_dementia_2 == 1 & dx_sum == 1 ~ 2,\n      ar_dx_mci_dementia_1 == 1 & ar_dx_mci_dementia_2 == 1 ~ 3,\n      ar_dx_mci_dementia_77 == 1 & dx_sum == 1 ~ NA_integer_\n    ),\n    ar_dx_imp_4cat_f = factor(\n      ar_dx_imp_4cat,\n      levels = as.numeric(value_labels_4cat),\n      labels = names(value_labels_4cat)\n    ),\n    ar_dx_imp_2cat = case_when(\n      ar_dx_imp_4cat == 0 ~ 0,\n      ar_dx_imp_4cat == 1 | ar_dx_imp_4cat == 2 | ar_dx_imp_4cat == 3 ~ 1,\n      TRUE ~ NA_integer_\n    ),\n    ar_dx_imp_2cat_f = factor(\n      ar_dx_imp_2cat,\n      levels = as.numeric(value_labels_2cat),\n      labels = names(value_labels_2cat)\n    )\n  ) %&gt;% select(-c(dx_sum))\n\n# Relocate new variables after ar_dx_mci_dementia_77\ncols &lt;- c(\"ar_dx_imp_2cat_f\", \"ar_dx_imp_2cat\", \"ar_dx_imp_4cat_f\", \n          \"ar_dx_imp_4cat\") \n\nfor (col in cols) {\n  aps_rep &lt;- aps_rep %&gt;%\n    dplyr::relocate(all_of(col), .after = ar_dx_mci_dementia_77)\n}"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html",
    "href": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html",
    "title": "Clean DETECT tool pilot study data imported from REDCap",
    "section": "",
    "text": "In this file, we do some initial cleaning of the DETECT tool pilot study data imported from REDCap to prepare it for dashboard summary. This pilot lasted for 2 weeks, starting on 11/11/2024 and ending on 11/25/2023."
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html#replace-reporting-instument-timestamp-variable-with-timestamp-end-variable",
    "href": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html#replace-reporting-instument-timestamp-variable-with-timestamp-end-variable",
    "title": "Clean DETECT tool pilot study data imported from REDCap",
    "section": "Replace reporting instument timestamp variable with timestamp end variable",
    "text": "Replace reporting instument timestamp variable with timestamp end variable\nThe reporting_instrument_timestamp variable contains information on both the submission time and the completion status of each survey response. The variable reporting_instrument_complete also provides completion status information. A new variable will be created that only contains the sumbmission time and the reporting_instrument_timestamp variable will be removed.\n\ntool_pilot &lt;- tool_pilot %&gt;% \n  mutate(\n    timestamp_end = case_when(\n      is.na(reporting_instrument_timestamp) ~ NA,\n      reporting_instrument_timestamp == \"[not completed]\" ~ NA,\n      TRUE ~ reporting_instrument_timestamp\n    ),\n    timestamp_end = as.POSIXct(timestamp_end, tz = \"UTC\")\n  ) %&gt;% relocate(c(timestamp_end, reporting_instrument_complete),\n                 .after = ri_timestamp_start) %&gt;%\n  select(-c(reporting_instrument_timestamp))"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html#clinician-names",
    "href": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html#clinician-names",
    "title": "Clean DETECT tool pilot study data imported from REDCap",
    "section": "Clinician names",
    "text": "Clinician names\nCombine clinician names across all institutions into a single column\n\nclinician_names &lt;- c(\"ri_clinician_bcm\", \"ri_clinician_bcm_oth\", \n                     \"ri_clinician_jh\", \"ri_clinician_jh_oth\", \n                     \"ri_clinician_ucsf\", \"ri_clinician_ucsf_oth\", \n                     \"ri_clinician_uab\", \"ri_clinician_uab_oth\", \n                     \"ri_clinician_utsw\", \"ri_clinician_utsw_oth\", \n                     \"ri_clinician_lbj\", \"ri_clinician_lbj_oth\", \n                     \"ri_clinician_utp\", \"ri_clinician_utp_oth\")\n\ntool_pilot &lt;- tool_pilot %&gt;% \n  mutate(\n    ri_clinician_id_name = coalesce(ri_clinician_utp_oth, ri_clinician_utp, \n                                     ri_clinician_lbj_oth, ri_clinician_lbj, \n                                     ri_clinician_utsw_oth, ri_clinician_utsw, \n                                     ri_clinician_uab_oth, ri_clinician_uab, \n                                     ri_clinician_ucsf_oth, ri_clinician_ucsf, \n                                     ri_clinician_jh_oth, ri_clinician_jh, \n                                     ri_clinician_bcm_oth, ri_clinician_bcm)\n    ) %&gt;% select(-c(all_of(clinician_names))) %&gt;%\n  relocate(ri_clinician_id_name, .after = ri_clinician_id)"
  },
  {
    "objectID": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html#numeric-and-factor-variables",
    "href": "data_management/detect_tool_pilot/data_01_detect_tool_pilot_test.html#numeric-and-factor-variables",
    "title": "Clean DETECT tool pilot study data imported from REDCap",
    "section": "Numeric and factor variables",
    "text": "Numeric and factor variables\n\nInstitution\n\ncols &lt;- c(\"ri_institution\", \"ri_institution_2\")\nget_values(tool_pilot, cols)\n\n[1] \"Baylor College of Medicine - BT House Calls\"\n[2] \"Johns Hopkins - JHOME\"                      \n[3] \"University of Alabama - UAB House Calls\"    \n[4] \"UT Southwestern - COVE\"                     \n[5] \"UTH Houston - LBJ House Calls\"              \n[6] \"UTH Houston - UT Physicians House Calls\"    \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Baylor College of Medicine - BT House Calls\" = 1, \n    \"Johns Hopkins - JHOME\" = 2, \n    \"UCSF - Care at Home Program\" = 3,\n    \"University of Alabama - UAB House Calls\" = 4, \n    \"UT Southwestern - COVE\" = 5, \n    \"UTH Houston - LBJ House Calls\" = 6,\n    \"UTH Houston - UT Physicians House Calls\" = 7\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"7cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool_pilot &lt;- tool_pilot |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\ntool_pilot &lt;- tool_pilot %&gt;%\n  rename(calc_institution_7cat = calc_institution) %&gt;%\n  mutate(\n    calc_institution_7cat_f = factor(\n      calc_institution_7cat, levels = as.numeric(value_labels),\n      labels = names(value_labels)\n    )\n  ) %&gt;% relocate(calc_institution_7cat_f, .after = calc_institution_7cat)\n\n\n\nScreening items\n\ncols &lt;- c(\"ri_necessities\", \"ri_environment\", \"ri_caregiver\", \"ri_sedated\", \n          \"ri_isolated\", \"ri_anxious\", \"ri_prohibited\", \"ri_unmet_needs\", \n          \"ri_injuries\")\n\nget_values(tool_pilot, cols)\n\n[1] \"No\"               \"Unable to assess\" \"Yes\"             \n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Yes\" = 1,\n    \"No\" = 0,\n    \"Unable to assess\" = 99\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"3cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool_pilot &lt;- tool_pilot |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nri_caregiver_un_reason\n\ncols &lt;- c(\"ri_caregiver_un_reason\")\n\nget_values(tool_pilot, cols)\n\n[1] \"Caregiver not present\"\n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Caregiver not present\" = 1,\n    \"Other reason\" = 98\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool_pilot &lt;- tool_pilot |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nYes or No\n\ncols &lt;- c(\"suspect_em\", \"ri_report\", \"ri_refer_svcs\", \"ri_reflection\")\n\nget_values(tool_pilot, cols)\n\n[1] \"No\"  \"Yes\"\n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Yes\" = 1,\n    \"No\" = 0\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool_pilot &lt;- tool_pilot |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)\n\n\n\nEM type\n\ncols &lt;- paste0(\"ri_em_type_\", c(1:7, 98, 99))\n\n### Change factor labels from \"checked\" and \"unchecked\" to \"Yes\" and \"No\"\ntool_pilot &lt;- tool_pilot %&gt;% \n  mutate(\n    across(\n      .cols = all_of(cols),\n      .fns = ~ case_when(\n        .x == \"Checked\" ~ \"Yes\",\n        .x == \"Unchecked\" ~ \"No\"\n      )\n    )\n  )\n\n\nget_values(tool_pilot, cols)\n\n[1] \"No\"  \"Yes\"\n\n\n\n# Numeric coding for character values in each column of interest\nvalue_labels &lt;- c(\n    \"Yes\" = 1,\n    \"No\" = 0\n)\n\n# NA values\nna_values &lt;- c()\n\n# Suffix for the version of each column with \"Don't Know\" and \"Refused\" changed\n# to NA.\nsuffix &lt;- \"2cat\"\n\n# Labels and levels for factors (Shouldn't need to change this code)\nfactor_labs_levs &lt;- value_labels[!value_labels %in% na_values]\n\n# Column names for the version of each column with \"Don't Know\" and \"Refused\" \n# changed to NA (Shouldn't need to change this code).\ncols_suffix &lt;- paste(cols, suffix, sep = \"_\")\n\n# Prepare columns for analysis\n# - Convert character values to numeric values\n# - Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n# - Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n# - Arrange the columns as: original column, numeric column w/o \"Don't know\" and \n#   \"Refused\", and the factor version of the column.\ntool_pilot &lt;- tool_pilot |&gt;\n  # Convert character values to numeric values\n  chars_to_nums(cols, value_labels) |&gt; \n  # Create a version of each column with \"Don't know\" and \"Refused\" converted to NA\n  nums_to_nas(cols, na_values, suffix) |&gt; \n  # Relocate new columns with NA values immediately after the original column\n  relocate_na_cols(cols, suffix) |&gt; \n  # Create a factor version of each column (w/o \"Don't know\" and \"Refused\")\n  factors(cols_suffix, factor_labs_levs) |&gt; \n  # Relocate factor columns immediately after the new columns with NA values\n  relocate_factors(cols_suffix) |&gt;\n  # Drop the original variable if the version with \"cat\" suffix has the exact\n  # same values.\n  drop_dup_orig(cols, cols_suffix)"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html",
    "href": "data_management/mock_data/01_mock_data_creation.html",
    "title": "Clinician Screening Tracker Data",
    "section": "",
    "text": "Total patients seen by clinicians: 8003 Total eligible appointments: 9121\nTotal screened appointments: 5210 Total screened patients that will be contacted for recruitment: 4863 Total recruited patients that will be interviewed: 180\nThe details for the variables created using this file are contained here: https://uthtmc.sharepoint.com/:w:/r/sites/SPHDETECT-RPC/Shared%20Documents/DETECT-RPC%20R61%20R33%202022/0_data_folders/02_dashboards/00_documentation/03_r33_dashboards_implementation_planning_notes.docx.docx?d=we1c72482657342aea35ede2de4e980a0&csf=1&web=1&e=nUY12K\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(here)\n\nWarning: package 'here' was built under R version 4.3.3\n\n\nhere() starts at C:/Users/ebiek/OneDrive - UTHealth Houston/Cannell lab/r33_dashboards\n\nlibrary(tidyr, include.only = c(\"separate_wider_delim\", \"crossing\"))\n\nWarning: package 'tidyr' was built under R version 4.3.2\n\nlibrary(ids)\n\nWarning: package 'ids' was built under R version 4.3.3\n\nlibrary(randomNames)\n\nWarning: package 'randomNames' was built under R version 4.3.3\n\nlibrary(generator, include.only = \"r_phone_numbers\")\n\nWarning: package 'generator' was built under R version 4.3.3"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#unique-mrns-and-dyad-ids",
    "href": "data_management/mock_data/01_mock_data_creation.html#unique-mrns-and-dyad-ids",
    "title": "Clinician Screening Tracker Data",
    "section": "Unique MRNs and Dyad IDs",
    "text": "Unique MRNs and Dyad IDs\n\n# Dyad IDs\nset.seed(123)\ndyad_id &lt;- ids::random_id(8003, 3)\n\n\n# Combine MRNs and Dyad IDs\nmrn_dyad_ids &lt;- data.frame(mrn, dyad_id, mrn_dyad_join = c(1:8003))\n\n\n# MRN Dyad join column for full mock data\n\nset.seed(1)\nmrn_dyad_join_data &lt;- sample(\n  c(1:8003, sample(c(1:8003), size = (13158 - 8003), replace = TRUE)))"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#visit-dates",
    "href": "data_management/mock_data/01_mock_data_creation.html#visit-dates",
    "title": "Clinician Screening Tracker Data",
    "section": "Visit dates",
    "text": "Visit dates"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#physician-and-clinics",
    "href": "data_management/mock_data/01_mock_data_creation.html#physician-and-clinics",
    "title": "Clinician Screening Tracker Data",
    "section": "Physician and clinics",
    "text": "Physician and clinics\n\n# Physician join column for full mock data\n\nset.seed(2)\nphys_join_data &lt;- sample(\n  c(1:68, sample(c(1:68), size = (13158 - 68), replace = TRUE)))"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#screened-assignments",
    "href": "data_management/mock_data/01_mock_data_creation.html#screened-assignments",
    "title": "Clinician Screening Tracker Data",
    "section": "Screened assignments",
    "text": "Screened assignments\n\nset.seed(23)\n# 2906 of all 5087 eligible patients are screened\nscreened_op &lt;- sample(c(rep(1, 2001), sample(c(0,1), size = 11157, replace = TRUE)))"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#create-full-mock-data-set",
    "href": "data_management/mock_data/01_mock_data_creation.html#create-full-mock-data-set",
    "title": "Clinician Screening Tracker Data",
    "section": "Create full mock data set",
    "text": "Create full mock data set\n\nAdd ids, clinician data and appointment times\n\n\nAdd eligibility and screened status\n\nclin_data &lt;- data_app %&gt;% \n  group_by(mrn) %&gt;%\n  arrange(visit_date) %&gt;%\n  mutate(\n    visit_no = row_number(),\n    # Arbitrarily assign eligibility for alternating visits (odd vs even)\n    eligible = case_when(\n      visit_no %% 2 == 1  ~ 1,\n      visit_no %% 2 == 0  ~ 0\n    )\n  ) %&gt;% \n  ungroup() %&gt;%\n  mutate(\n    screened = case_when(\n      eligible == 1 ~ screened_op,\n      TRUE          ~ NA\n    )\n  )"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#screened-patients-to-be-recruited",
    "href": "data_management/mock_data/01_mock_data_creation.html#screened-patients-to-be-recruited",
    "title": "Clinician Screening Tracker Data",
    "section": "Screened Patients to be Recruited",
    "text": "Screened Patients to be Recruited\n\n# Create call date times (weekdays only)\ndates &lt;- data.frame(dates = seq(as.Date('2026-09-01'), as.Date('2027-05-30'), by = \"day\")) \ntimes &lt;- c(paste0(9:17, \":00:00\"), paste0(9:17, \":30:00\"), paste0(9:17, \":15:00\"))\n\nweekends &lt;- c(\"Saturday\", \"Sunday\")\n\n# create combinations of data and time, de-duplicate and sort\ncall_date_time &lt;- tidyr::crossing(dates, data.frame(times)) %&gt;% \n  mutate(\n    call_date_time = as.POSIXct(paste0(dates, times))\n  ) %&gt;% select(call_date_time) %&gt;%\n  # Filter out weekends\n  filter(!weekdays(call_date_time) %in% weekends) %&gt;%\n  slice(1:rec_n) %&gt;%\n  mutate(\n    join_id = 1:rec_n\n)"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#create-recruiter-ids",
    "href": "data_management/mock_data/01_mock_data_creation.html#create-recruiter-ids",
    "title": "Clinician Screening Tracker Data",
    "section": "Create recruiter IDs",
    "text": "Create recruiter IDs\n\nall_rec &lt;- paste0(\"rec\", 1:4)\n\nrec_id &lt;- sample(c(rep(all_rec, 60), sample(x = all_rec, size = (rec_n-240), replace = TRUE)))\n\n\nrec_data &lt;- scr_pat %&gt;% right_join(., call_date_time, by = 'join_id') %&gt;%\n  mutate(\n    rec_id = rec_id\n  ) %&gt;% arrange(call_date_time)"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#create-mock-data-for-each-call-log-variable",
    "href": "data_management/mock_data/01_mock_data_creation.html#create-mock-data-for-each-call-log-variable",
    "title": "Clinician Screening Tracker Data",
    "section": "Create mock data for each call log variable",
    "text": "Create mock data for each call log variable\n\nsample_op &lt;- function(options){\n  sample(options, size = rec_n, replace = TRUE)\n}\n\n\n# Answered status\nset.seed(4)\nanswered &lt;- sample(c(rep(\"No answer/ busy sign\", 750), rep(\"Participant answered\", 953), rep(\"Voicemail\", 904),\n              rep(\"Wrong number\", 124), rep(\"Someone else answered\", 753)), size = rec_n, replace = TRUE)\n\n# Phone numbers\nset.seed(3)\nparticipant_phone_number &lt;- r_phone_numbers(n = rec_n)\n\n# Text box mock entries\nset.seed(1)\nother_op &lt;- sample(c(paste0(\"Some explanation_\",1:10 ), paste0(\"Another explanation_\", 1:18),                        \n                     paste0(\"A different explanation_\", 1:7)), size = rec_n, replace = TRUE)\n\n# Comments mock entries\nset.seed(2)\ncomments &lt;- sample(c(paste0(\"Some comment_\",1:10 ), paste0(\"Another comment_\", 1:18), \n                      paste0(\"A different comment_\", 1:7), rep(NA, 3005)), size = rec_n, replace = TRUE)\n\n\nset.seed(1)\ncall_data &lt;- data.frame(rec_data, participant_phone_number, answered) %&gt;%\n  mutate(\n    left_message = case_when(\n      answered == \"No answer/ busy sign\" ~ sample_op(\n        c(\"Left message\", \"Unable to leave message\")), \n      answered == \"Voicemail\"            ~ sample_op(\n        c(\"Left message\", \"Unable to leave message\")),\n      TRUE                               ~ NA\n    ),\n    no_message = case_when(\n      left_message == \"Unable to leave message\" ~ sample_op(\n        c(\"Voicemail box is full\", \"No voicemail box set up\", \"Other\")),\n      TRUE                 ~ NA\n    ),\n    no_message_other = case_when(\n      no_message == \"Other\" ~ other_op,\n      TRUE                  ~ NA\n    ),\n    answered_someone_else = case_when(\n      answered == \"Someone else answered\" ~ sample_op(\n        c(\"A spouse or partner\", \"An ex spouse or partner\", \n          \"A parent or step-parent\",\n          \"A brother or sister\", \"A son or daughter\", \"Another relative\", \n          \"A coworker\", \"A neighbor\", \"A friend\", \"Some other non-relative\", \n          \"Don’t know\")\n      ),\n      TRUE                                ~ NA\n    ),\n    participant_contacted = case_when(\n      answered == \"Someone else answered\" ~ sample_op(\n        c(\"Participant contacted\", \"Participant not contacted\")),\n      TRUE                                ~ NA\n    ),\n    pc_no_result = case_when(\n      participant_contacted == \"Participant not contacted\" ~ sample_op(\n        c(\"Scheduled call back\", \"Unable to schedule callback\")\n      ),\n      TRUE                          ~ NA\n    ),\n    call_back_date_time = case_when(\n      pc_no_result == \"Scheduled call back\" ~ call_date_time + lubridate::days(2),\n      TRUE                                  ~ NA\n    ),\n    # Remove weekends\n    call_back_date_time = case_when(weekdays(call_back_date_time) %in% weekends ~ \n      call_back_date_time + lubridate::days(2),\n      TRUE ~ call_back_date_time),\n    call_back_phone_number = case_when(\n      pc_no_result == \"Scheduled call back\" ~ participant_phone_number,\n      TRUE                                  ~ NA \n    ),\n    call_back_no = case_when(\n      pc_no_result == \"Unable to schedule callback\" ~ sample_op(\n        c(\"Person refused\", \"Language barrier\", \"Person hung up\",\n          \"Participant impaired or disabled\", \"Participant deceased\",\n          \"Participant not available\", \"Other\")\n      ),\n      TRUE                                          ~ NA\n    ),\n    call_back_no_other = case_when(\n      call_back_no == \"Other\" ~ other_op,\n      TRUE                    ~ NA\n    ),\n    pc_yes_result = case_when(\n      answered == \"Participant answered\" | \n        participant_contacted == \"Participant contacted\" ~ \n        sample_op(\n          c(\"Interview scheduled\", \"Interview not scheduled\")\n        )\n    ),\n    interview_not_scheduled = case_when(\n      pc_yes_result == \"Interview not scheduled\" ~ sample_op(\n        c(\"Participant refused/ hung up\", \"Participant is not eligible\")\n      ),\n      TRUE                                       ~ NA\n    ),\n    ineligible = case_when(\n      interview_not_scheduled == \"Participant is not eligible\" ~ sample_op(\n        c(\"Cannot speak/read English or Spanish\", \n          \"Unwilling/unable to give consent\")\n      ),\n      TRUE                                                     ~ NA\n    ),\n    comments = comments\n  ) %&gt;% select(-c(join_id))"
  },
  {
    "objectID": "data_management/mock_data/01_mock_data_creation.html#create-a-df-with-1800-unique-participants",
    "href": "data_management/mock_data/01_mock_data_creation.html#create-a-df-with-1800-unique-participants",
    "title": "Clinician Screening Tracker Data",
    "section": "Create a df with 1800 unique participants",
    "text": "Create a df with 1800 unique participants\n\n360 is 20% of this\nEach participant in a previous call log was called an average of 1.7 times.\n\n\n# Split the data in half so that the first half has 1800 patients and a sample of the second half will have 1260\nsecond_call &lt;- call_data %&gt;%\n  mutate(\n    second_call = case_when(\n      pc_no_result == \"Scheduled call back\" ~ 1,\n      answered == \"No answer/ busy sign\"    ~ 1,\n      TRUE                                  ~ 0\n    )\n  )\n\n# Filter 1260 participants for a second call and 540 of that (1800 - 1260) for only one call.\nset.seed(6)\nscall_y &lt;- second_call %&gt;% filter(second_call == 1) %&gt;% slice_sample(n = 1260)\nscall_n &lt;- second_call %&gt;% filter(second_call == 0) %&gt;% slice_sample(n = 540) \n\n# Dyad_ids for participants that will receive a second call\nscall_y_id &lt;- scall_y %&gt;% select(dyad_id, call_back_date_time, call_date_time) %&gt;% \n  rename(new_id = dyad_id, \n         new_call_time = call_back_date_time,\n         first_call_time = call_date_time)\n\n# Calls that will be converted to second calls\nyes_call &lt;- second_call %&gt;% \n  filter(second_call == 0 & !(dyad_id %in% scall_n$dyad_id)) %&gt;% \n  slice_sample(n = 1260) %&gt;% cbind(., scall_y_id) %&gt;%\n  # Set call time to be call back time of first call and set new id to dyad id\n  mutate(\n    dyad_id = new_id,\n    call_date_time = case_when(\n      is.na(new_call_time) == FALSE ~ new_call_time,\n      TRUE                          ~ first_call_time + lubridate::days(3)\n    ),\n    # Remove weekends\n    call_date_time = case_when(weekdays(call_date_time) %in% weekends ~ \n      call_date_time + lubridate::days(2),\n      TRUE ~ call_date_time)\n  ) %&gt;%\n  select(-c(new_id, new_call_time, first_call_time))\n  \n\nrec_raw_data &lt;- rbind(scall_y, scall_n, yes_call) %&gt;% arrange(call_date_time) %&gt;% select(-c(second_call))"
  },
  {
    "objectID": "data_management/mock_data/03_recruiter_scheduling_data_calc.html",
    "href": "data_management/mock_data/03_recruiter_scheduling_data_calc.html",
    "title": "Load Packages",
    "section": "",
    "text": "library(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(here)\n\nWarning: package 'here' was built under R version 4.3.3\n\n\nhere() starts at C:/Users/ebiek/OneDrive - UTHealth Houston/Cannell lab/r33_dashboards\n\nlibrary(ids)\n\nWarning: package 'ids' was built under R version 4.3.3\n\nlibrary(lubridate, include.only = c(\"year\", \"month\", \"day\", \"hour\"))\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n\n# Load function for converting POSIXct dates to a Month YYYY format.\nsource(here::here(\"r\", \"month_name_year.R\"))"
  },
  {
    "objectID": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#split-the-date-time-variable",
    "href": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#split-the-date-time-variable",
    "title": "Load Packages",
    "section": "Split the date-time variable",
    "text": "Split the date-time variable\n\ndate_time &lt;- raw_data %&gt;% \n  mutate(\n    call_hour = lubridate::hour(call_date_time),\n    call_hour_f = factor(call_hour, \n      labels = c(\"9-9:59\", \"10-10:59\", \"11-11:59\", \"12-12:59\", \"13-13:59\", \n                 \"14-14:59\", \"15-15:59\", \"16-16:59\", \"17\")\n      ),\n    call_day = weekdays(as.Date(call_date_time)),\n    call_day = factor(call_day,\n                      levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")),\n    call_date = as.Date(call_date_time)\n    )%&gt;%\n      month_year(call_date_time, \"call_month_yr\") %&gt;%\n      relocate(c(call_month_yr, call_date, call_day, call_hour, call_hour_f), \n               .after = \"call_date_time\")"
  },
  {
    "objectID": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#gift-card-data-gift-card-id-person-id-and-dyad-id",
    "href": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#gift-card-data-gift-card-id-person-id-and-dyad-id",
    "title": "Load Packages",
    "section": "Gift card data (Gift card ID, person ID and dyad ID)",
    "text": "Gift card data (Gift card ID, person ID and dyad ID)\n\nset.seed(56)\ngift_card &lt;- date_time %&gt;% select(dyad_id, pc_yes_result) %&gt;% filter(pc_yes_result == \"Interview scheduled\") %&gt;% slice_sample(n = 180) %&gt;%\n  mutate(\n    gift_card_id = ids::random_id(nrow(.), 5)\n  ) %&gt;% select(-c(pc_yes_result))"
  },
  {
    "objectID": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#join-to-gift-card-data",
    "href": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#join-to-gift-card-data",
    "title": "Load Packages",
    "section": "Join to Gift card Data",
    "text": "Join to Gift card Data\n\nrec_sch_gift &lt;- date_time %&gt;% left_join(., gift_card, by = \"dyad_id\")"
  },
  {
    "objectID": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#create-column-of-the-overall-responses",
    "href": "data_management/mock_data/03_recruiter_scheduling_data_calc.html#create-column-of-the-overall-responses",
    "title": "Load Packages",
    "section": "Create column of the overall responses",
    "text": "Create column of the overall responses\n\noverall_response &lt;- rec_sch_gift %&gt;%\n  mutate(\n    overall_response = coalesce(interview_not_scheduled, pc_yes_result,\n    call_back_no, pc_no_result, no_message, left_message, answered)\n  )"
  }
]