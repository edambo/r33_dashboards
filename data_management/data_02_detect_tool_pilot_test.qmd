---
title: "Create variables for visualizing the DETECT tool pilot study data"
---

# Overview

In this file, we create some new variables that summarize the completion and missingness counts for various variables in the DETECT tool pilot study data. These new variables will used in creating interactive plots using the plotly package. 


# Load packages

```{r, message= FALSE}
library(dplyr, warn.conflicts = FALSE)
library(readr)
library(here)
library(crosstalk)
```


# Load data and custom functions

```{r, message=FALSE}
pilot_data <- readRDS(here::here("data", "detect_tool_pilot",
                                 "detect_tool_pilot.RDS"))
var_desc <- readRDS(here::here("data", "detect_tool_pilot",
                               "detect_tool_pilot_variable_descriptions.RDS"))
aps_reports_data <- read.csv(here::here("data",
                                    "aps_report_data.csv"))
```


```{r}
source(here::here("r", "add_shade_column_x_rows.R"))
```


# Select variables useful for the dashboard

```{r}
dash_vars <- c("record_id", "reporting_instrument_complete", "ri_date", 
               "ri_patient_mrn", "ri_institution_7cat_f", "ri_clinician_id", 
               "ri_clinician_id_name", "ri_necessities_3cat_f", 
               "ri_environment_3cat_f", "ri_environment_un_reason", 
               "ri_caregiver_3cat_f", "ri_caregiver_un_reason_2cat_f", 
               "ri_caregiver_oth", "ri_sedated_3cat_f", "ri_isolated_3cat_f", 
               "ri_anxious_3cat_f", "ri_prohibited_3cat_f", 
               "ri_unmet_needs_3cat_f", "ri_injuries_3cat_f", 
               "ri_patient_assess", "suspect_em_2cat_f", "ri_em_no_reason", 
               "ri_em_reason", "ri_em_type_1_2cat_f", "ri_em_type_2_2cat_f", 
               "ri_em_type_3_2cat_f", "ri_em_type_4_2cat_f", "ri_em_type_5_2cat_f", 
               "ri_em_type_6_2cat_f", "ri_em_type_7_2cat_f", "ri_em_type_98_2cat_f", 
               "ri_em_type_99_2cat_f", "ri_em_type_other", "ri_report_2cat_f", 
               "ri_aps_no_reason", "ri_refer_svcs_2cat_f", 
               "ri_refer_svcs_specify", "ri_reflection_2cat_f", 
               "ri_reflection_notes")

dash_data <- pilot_data %>% select(all_of(dash_vars))
```

```{r}
ind_em_vars <- c("ri_necessities_3cat_f", "ri_environment_3cat_f", 
                 "ri_caregiver_3cat_f", "ri_sedated_3cat_f", 
                 "ri_isolated_3cat_f", "ri_anxious_3cat_f", 
                 "ri_prohibited_3cat_f", "ri_unmet_needs_3cat_f", 
                 "ri_injuries_3cat_f")
```

# Missingness data

```{r}
missing_data <- dash_data
```

## Create fuction to generate missingness variables

This function will also take branching/ skip logic into consideration.

```{r}
pilot_miss <- function(df, var, condition = NULL){
  if(is.null(condition)){
    new_df <- df %>% 
      mutate(
        "{var}_miss" := case_when(
          is.na(.data[[var]]) ~ 1,
          TRUE ~ 0
        )
      )
  }else if(!is.null(condition)){
    new_df <- df %>%
      mutate(
         "{var}_miss" := case_when(
           eval(parse(text = condition)) & is.na(.data[[var]]) ~ 1,
           !(eval(parse(text = condition))) & is.na(.data[[var]]) ~ NA,
           eval(parse(text = condition)) & !is.na(.data[[var]]) ~ 0
        )       
      )
  }
  
  new_df %>% relocate(paste0(var, "_miss"), .after = var)
}
```

## Variables with no conditional arguments/ skip logic

```{r}
vars <- c("ri_patient_mrn", "ri_institution_7cat_f", "ri_clinician_id_name", 
          "ri_necessities_3cat_f", "ri_environment_3cat_f", 
          "ri_caregiver_3cat_f", "ri_sedated_3cat_f", "ri_isolated_3cat_f", 
          "ri_anxious_3cat_f", "ri_prohibited_3cat_f", "ri_unmet_needs_3cat_f", 
          "ri_injuries_3cat_f", "suspect_em_2cat_f", "ri_reflection_2cat_f"
          )
condition <- NULL
```

```{r}
for(var in vars){
  missing_data <- pilot_miss(df = missing_data, var = var, 
                     condition = condition)  
}
```

## Variables with conditional arguments/ skip logic

### ri_environment_un_reason

```{r}
var <- "ri_environment_un_reason"

condition_vars <- c("ri_necessities_3cat_f", "ri_environment_3cat_f")

condition <- "if_any(.cols = all_of(condition_vars), .fns = ~.x == 'Unable to assess')"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_caregiver_un_reason

```{r}
var <- "ri_caregiver_un_reason_2cat_f"
condition <- "ri_caregiver_3cat_f == 'Unable to assess'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition) 
```

### ri_caregiver_oth

```{r}
var <- "ri_caregiver_oth"
condition <- "ri_caregiver_un_reason_2cat_f == 'Other reason'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_patient_assess

```{r}
var <- "ri_patient_assess"

condition_vars <- c("ri_sedated_3cat_f", "ri_isolated_3cat_f",
                    "ri_anxious_3cat_f", "ri_prohibited_3cat_f", 
                    "ri_unmet_needs_3cat_f", "ri_injuries_3cat_f")

condition <- "if_any(.cols = all_of(condition_vars), .fns = ~.x == 'Unable to assess')"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_em_no_reason

```{r}
var <- "ri_em_no_reason"

condition_vars <- c("ri_necessities_3cat_f", "ri_environment_3cat_f",
                    "ri_caregiver_3cat_f", "ri_sedated_3cat_f", 
                    "ri_isolated_3cat_f", "ri_anxious_3cat_f", 
                    "ri_prohibited_3cat_f", "ri_unmet_needs_3cat_f", 
                    "ri_injuries_3cat_f")

condition <- "suspect_em_2cat_f == 'No' & if_any(.cols = all_of(condition_vars), 
.fns = ~.x == 'Yes')"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_em_reason

```{r}
var <- "ri_em_reason"

condition_vars <- c("ri_necessities_3cat_f", "ri_environment_3cat_f",
                    "ri_caregiver_3cat_f", "ri_sedated_3cat_f", 
                    "ri_isolated_3cat_f", "ri_anxious_3cat_f", 
                    "ri_prohibited_3cat_f", "ri_unmet_needs_3cat_f", 
                    "ri_injuries_3cat_f")

condition <- "suspect_em_2cat_f == 'Yes' & if_all(.cols = all_of(condition_vars), 
.fns = ~.x != 'Yes')"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### EM Type vars

```{r}
em_type_vars <- c("ri_em_type_1_2cat_f", "ri_em_type_2_2cat_f", "ri_em_type_3_2cat_f", 
          "ri_em_type_4_2cat_f", "ri_em_type_5_2cat_f", "ri_em_type_6_2cat_f", 
          "ri_em_type_7_2cat_f", "ri_em_type_98_2cat_f", "ri_em_type_99_2cat_f")
```

```{r}
missing_data <- missing_data %>%
  mutate(
    ri_em_type_miss = case_when(
      suspect_em_2cat_f == 'Yes' & 
        if_all(.cols = all_of(em_type_vars), 
               .fns = ~.x == "No") ~ 1,
      suspect_em_2cat_f != 'Yes' & 
        if_all(.cols = all_of(em_type_vars), 
               .fns = ~.x == "No") ~ NA,
      suspect_em_2cat_f == 'Yes' & 
        if_any(.cols = all_of(em_type_vars), 
               .fns = ~.x == "Yes") ~ 0      
      )
  )
```

### ri_em_type_other

```{r}
var <- "ri_em_type_other"
condition <- "ri_em_type_98_2cat_f == 'Checked'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_report_2cat_f

```{r}
var <- "ri_report_2cat_f"
condition <- "suspect_em_2cat_f == 'Yes'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_aps_no_reason

```{r}
var <- "ri_aps_no_reason"
condition <- "ri_report_2cat_f == 'No'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_refer_svcs_2cat_f

```{r}
var <- "ri_refer_svcs_2cat_f"
condition <- "suspect_em_2cat_f == 'Yes'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```

### ri_refer_svcs_specify

```{r}
var <- "ri_refer_svcs_specify"
condition <- "ri_refer_svcs_2cat_f == 'Yes'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition) 
```

### ri_reflection_notes

```{r}
var <- "ri_reflection_notes"
condition <- "ri_reflection_2cat_f == 'Yes'"
```

```{r}
missing_data <- pilot_miss(df = missing_data, var = var, 
                   condition = condition)
```


# Prepare Missingness data for visualization

## All data

```{r}
label_order <- c(
  "Brief note", "Have helpful details", "Specify other service", 
  "Other service referral", "No intention to report to APS reason", 
  "Intend to report to APS", "Specific other mistreatment type suspected", 
  "EM type", "Suspect EM reason", 
  "Indicators observed but EM not suspected reason", 
  "Suspect EM", "Patient not assessed reason", 
  "Unexplained injuries", "Unmet needs", "Prohibited", "Anxious", "Isolated", 
  "Chemically sedated", "Other reason caregiver not assessed", 
  "Caregiver not assessed reason", "Defensive", 
  "Environment not assessed reason", "Environment health or safety concern", 
  "Absence of necessities ", "Clinician name", "Institution", "Patient MRN"
)

missing_plot_data <- missing_data %>% 
  # Select only the record id and the missng data variables
  select(record_id, ends_with("_miss")) %>%
  # Remove "_miss" suffix
  rename_with(~gsub("_miss", "", .x)) %>%
  tidyr::pivot_longer(!record_id, names_to = "var", values_to = "missingness") %>%
  # Recode missingness
  mutate(
    missingness_3cat_f = case_when(
      missingness == 1 ~ "Missing",
      missingness == 0 ~ "Not missing",
      is.na(missingness) ~ "Not applicable"
    ),
    missingness_3cat_f = factor(missingness_3cat_f, 
                     levels = c("Missing", "Not missing", "Not applicable")
                     )
  ) %>%
  # Create count column
  group_by(var, missingness_3cat_f) %>%
  mutate(
    count = n()
  ) %>% ungroup() %>% 
  select(-c(record_id)) %>%
  distinct() %>% 
  # Add labels
  left_join(var_desc, by = c("var" = "variable")) %>%
  # Create label for aggregate variable "ri_em_type"
  mutate(
    label = case_when(
      var == "ri_em_type" ~ "EM type",
      TRUE ~ label
    )
  ) %>% 
  mutate(
    # Ensure the correct order of labels is maintained in the plot
    label = factor(label, levels = label_order)
    
  )
```

## Text box table data

```{r}
text_box_items <- c("ri_environment_un_reason", "ri_caregiver_oth",
                    "ri_patient_assess", "ri_em_no_reason", "ri_em_reason", 
                    "ri_em_type_other", "ri_aps_no_reason", 
                    "ri_refer_svcs_specify", "ri_reflection_notes")

text_box_miss <- sort(c(text_box_items, paste0(text_box_items, "_miss")))

text_box_data <- missing_data %>% select(record_id, ri_date, all_of(text_box_miss))
```

```{r}
# For each text box variable, create a variable that shows whether or not there is a value
for(i in text_box_items){
  text_box_data <- text_box_data %>%
    mutate(
      "{i}_filled_3cat_f" := case_when(
        .data[[paste0(i, "_miss")]] == 0 ~ "Filled",
        .data[[paste0(i, "_miss")]] == 1 ~ "Not filled",
        is.na(.data[[paste0(i, "_miss")]]) ~ "Not applicable"
      )
    ) %>% relocate(paste0(i, "_filled_3cat_f"), .after = i)
}
```

```{r}
text_box_table_data <- text_box_data %>% 
  # select(record_id, ends_with("filled_3cat_f")) %>%
  select(-c(ends_with("_miss"))) %>%
  mutate(
    across(
      .cols = ends_with("filled_3cat_f"),
      .fns = ~ factor(.x,
                      levels = c("Filled", "Not filled", "Not applicable")
                      )
    )
  ) %>%
  tidyr::pivot_longer(cols = ends_with("filled_3cat_f"), 
                      names_to = "var", values_to = "filled") %>%
  filter(filled == "Filled") %>% select(-c(filled, var)) %>%
  tidyr::pivot_longer(cols = !(c(record_id, ri_date)), 
                      names_to = "var", values_to = "content") %>%
  filter(!is.na(content)) %>% 
  # Add labels
  left_join(var_desc, by = c("var" = "variable")) %>% 
  select(-c(description, var)) %>%
  relocate(label, .after = ri_date) %>% distinct() %>%
  # Make the record id and label columns factors to aid filtering
  mutate(
    across(
      .cols = c(record_id, label),
      .fns = ~factor(.x)
    )
  )
```


# Univariate visuals data

```{r}
shared_plot_data <- dash_data %>% 
  select(-c(reporting_instrument_complete, ri_date, ri_patient_mrn)) %>%
  tidyr::pivot_longer(-c(record_id, ri_institution_7cat_f, ri_clinician_id), 
                      names_to = "var", values_to = "value") %>%
  # Add labels
  left_join(var_desc, by = c("var" = "variable"))
```

```{r}
# Function for creating data subsets
data_subset <- function(vars, level_list){
  df <- shared_plot_data %>% filter(var %in% vars) %>%
    mutate(
      # Convert NA into a character value
      value = case_when(is.na(value) ~ "NA",
                        TRUE ~ value),
      value = factor(value, 
                     levels = c(level_list, "NA"),
                     exclude = NULL
                     ),
      # Ensure the order of labels in dataframe is maintained in the plot
      label = factor(label, levels = rev(unique(label)))
    )
}
```

## Indicators of abuse

```{r}
ind_em_plot_data <- data_subset(ind_em_vars, 
                                        level_list = c("Yes", "No", 
                                                       "Unable to assess"))
```

## Suspect EM

```{r}
suspect_em_plot_data <- data_subset("suspect_em_2cat_f", 
                                        level_list = c("Yes", "No"))

```

## EM Type

```{r}
em_type_plot_data <- data_subset(em_type_vars, 
                                        level_list = c("Yes", "No"))

```

## Intent to Report to APS

```{r}
report_plot_data <- data_subset("ri_report_2cat_f", 
                                        level_list = c("Yes", "No"))
```

### Counts for APS reports intended and made

```{r}
# Intended reports
reports_intended <- dash_data %>% select(ri_patient_mrn, 
                                          ri_report_2cat_f) %>% 
  # Exclude fake patient
  filter(ri_patient_mrn != "Julia_Test_Patient1") %>%
  # Filter only rows where an intention to report was indicated
  filter(ri_report_2cat_f == "Yes") %>%
  # Standardize the MRN to remove trailing zeros at the beginning
  mutate(
    std_mrn = gsub("^0+", "", ri_patient_mrn)
  ) %>% relocate(std_mrn, .after = ri_patient_mrn) 

# Date range
start_date <- min(as.Date(dash_data$ri_date))
end_date <- max(as.Date(dash_data$ri_date))

# Reports made
reports_made <- aps_reports_data %>% 
  filter(between(as.Date(ar_encounter_date), start_date, end_date)) %>% 
  # Standardize the MRN to remove trailing zeros at the beginning
  mutate(
    std_mrn = gsub("^0+", "", ar_mrn)
  ) %>% relocate(std_mrn, .after = ar_mrn) %>%
  filter(std_mrn %in% reports_intended$std_mrn) %>% nrow()

reports_intended <- reports_intended %>% nrow()
```


# Bivariate visuals data

```{r}
# Number of cases where EM was suspected
suspect_em_no <- dash_data %>% filter(suspect_em_2cat_f == "Yes") %>% nrow()

# Number of cases where EM was not suspected
not_suspect_em_no <- dash_data %>% filter(suspect_em_2cat_f == "No") %>% nrow()
```

## Indicators of EM Module and Suspect EM

```{r}
ind_em_labs <- c(
  "Unmet needs", "Unexplained injuries", "Prohibited", "Isolated", 
  "Environment health or safety\nconcern", "Defensive", "Chemically sedated",
  "Anxious", "Absence of necessities"
  )
```

```{r}
# Character vector of filters
ind_sus_em_plot_data <- dash_data %>% 
  select(record_id, all_of(ind_em_vars), suspect_em_2cat_f) %>%
  tidyr::pivot_longer(all_of(ind_em_vars), 
                      names_to = "em_ind_var", values_to = "em_ind_value") %>%
  # Add labels
  left_join(var_desc, by = c("em_ind_var" = "variable")) %>%
  rename(
    "ind_em_label" = "label"
  ) %>%
  mutate(
    # Include line breaks in labels
    ind_em_label = stringr::str_wrap(ind_em_label, width = 30),
    ind_em_label = factor(ind_em_label),
    # Convert NA into a character value
    em_ind_value = case_when(is.na(em_ind_value) ~ "NA",
                      TRUE ~ em_ind_value),
    em_ind_value = factor(em_ind_value, 
                   levels = c("Yes", "No", "Unable to assess", "NA"),
                   exclude = NULL
                   )
  ) %>%
  # Replace the EM indicator variable name column with the labels
  relocate(ind_em_label, .after = suspect_em_2cat_f) %>%
  select(-c(description, em_ind_var)) %>%
  reframe(
    count = n(), .by = c(suspect_em_2cat_f,ind_em_label, em_ind_value)
  ) %>%   
  # Include counts for factor levels that have zero counts
  group_by(suspect_em_2cat_f, ind_em_label) %>%
  tidyr::complete(em_ind_value) %>%
  ungroup() %>%
  mutate(
    count = tidyr::replace_na(count, 0),
    perc = case_when(
      suspect_em_2cat_f == "Yes" ~ (count/suspect_em_no) *100,
      suspect_em_2cat_f == "No" ~ (count/not_suspect_em_no) *100
      ),
    perc_label = paste0(format(round(perc, 1), nsmall = 1), "%")
    )  
```

```{r}
ind_sus_em_table_data <- ind_sus_em_plot_data %>%
  select(-c(perc)) %>%
  mutate(
    ind_em_label = factor(ind_em_label, levels = ind_em_labs)
  ) %>% arrange(ind_em_label)
```

```{r}
every_other_x_rows <- function(df, shade_size){
  # Get number of rows of df
  df_rows <- nrow(df)
  
  # Create list of row numbers to shade
  shade_rows <- c()
  
  for(r in 0:df_rows){
    
    if(shade_size == 1){
      r_1 <- 1 + 2*r
      shade_rows <- append(shade_rows, c(r_1))       
    }else if(shade_size == 2){
      r_1 <- 3 + 4*r
      r_2 <- 4 + 4*r 
      shade_rows <- append(shade_rows, c(r_1, r_2))
      }else if(shade_size == 3){
        r_1 <- 4 + 6*r
        r_2 <- 5 + 6*r 
        r_3 <- 6 + 6*r 
        shade_rows <- append(shade_rows, c(r_1, r_2, r_3))
      }
  
  }
  
  # Create a binary column to indicate which rows to shade
  df %>% mutate(
    shade_col = case_when(
      row_number() %in% shade_rows == TRUE ~ 1,
      TRUE ~ 0
    )
  ) %>% relocate(shade_col)
}
```

```{r}
ind_sus_em_table_data <- add_shade_column_x_rows(ind_sus_em_table_data, 4)
```

## Suspect EM and EM Type

```{r}
em_type_labs <- c( "Self-neglect suspected", "Financial exploitation suspected", 
                   "Emotional or psychological abuse suspected", 
                   "Physical abuse suspected",  "Sexual abuse suspected", 
                   "Caregiver neglect suspected", "Abandonment suspected", 
                   "Other mistreatment type suspected", 
                   "Dont know/ Not sure of mistreatment type")
```

```{r}
sus_type_em_plot_data <- dash_data %>%
  select(record_id, suspect_em_2cat_f, all_of(em_type_vars)) %>%
  tidyr::pivot_longer(all_of(em_type_vars), 
                      names_to = "em_type_var", values_to = "em_type_value") %>%
  # Add labels
  left_join(var_desc, by = c("em_type_var" = "variable")) %>%
  filter(suspect_em_2cat_f == "Yes") %>%
  # Make `label` a factor variable
  mutate(
    label = factor(label, levels = rev(em_type_labs)),
    # Convert NA into a character value
    em_type_value = case_when(is.na(em_type_value) ~ "NA",
                      TRUE ~ em_type_value),
    em_type_value = factor(em_type_value, 
                   levels = c("Yes", "No", "NA"),
                   exclude = NULL
                   )
  ) %>% 
  # Relocate the label and remove the description variable
  relocate(label, .after = suspect_em_2cat_f) %>%
  select(-c(description, em_type_var, suspect_em_2cat_f)) %>%
  reframe(
    count = n(), .by = c(label, em_type_value)
  ) %>%   
  # Include counts for factor levels that have zero counts
  group_by(label) %>%
  tidyr::complete(em_type_value) %>%
  ungroup() %>%
  mutate(
    count = tidyr::replace_na(count, 0),
    perc = paste0(format(round((count/suspect_em_no) *100, 1), nsmall = 1), "%")
    )
```

```{r}
sus_type_em_table_data <- sus_type_em_plot_data %>%
  mutate(
    label = factor(label, levels = em_type_labs)
  ) %>% arrange(label)
```

```{r}
sus_type_em_table_data <- add_shade_column_x_rows(sus_type_em_table_data, 3)
```


# Save data

```{r}
path <- here::here("data", "detect_tool_pilot", "dashboard_prepped_data.RData")
save(missing_plot_data, text_box_table_data, 
     ind_em_plot_data, suspect_em_plot_data, em_type_plot_data, 
     report_plot_data, reports_intended, reports_made, ind_sus_em_plot_data, 
     ind_sus_em_table_data, sus_type_em_plot_data, sus_type_em_table_data, 
     file = path)

rm(list = ls())
```


